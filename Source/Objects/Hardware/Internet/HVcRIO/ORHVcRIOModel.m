//--------------------------------------------------------
// ORHVcRIOModel
// Created by Mark  A. Howe on Oct 17, 2017
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2017, University of North Carolina. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of 
//North Carolina sponsored in part by the United States
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020. 
//The University has certain rights in the program pursuant to 
//the contract and the program should not be copied or distributed 
//outside your organization.  The DOE and the University of 
//North Carolina reserve all rights in the program. Neither the authors,
//University of North Carolina, or U.S. Government make any warranty, 
//express or implied, or assume any liability or responsibility 
//for the use of this software.
//-------------------------------------------------------------

#pragma mark ***Imported Files
#import "ORHVcRIOModel.h"
#import "ORSafeQueue.h"
#import "NetSocket.h"
#import "ORDataTypeAssigner.h"
#import "ORDataPacket.h"

#pragma mark ***External Strings
NSString* ORHVcRIOModelIsConnectedChanged           = @"ORHVcRIOModelIsConnectedChanged";
NSString* ORHVcRIOModelIpAddressChanged             = @"ORHVcRIOModelIpAddressChanged";
NSString* ORHVcRIOModelSetPointChanged              = @"ORHVcRIOModelSetPointChanged";
NSString* ORHVcRIOModelReadBackChanged              = @"ORHVcRIOModelReadBackChanged";
NSString* ORHVcRIOModelQueCountChanged              = @"ORHVcRIOModelQueCountChanged";
NSString* ORHVcRIOModelSetPointsChanged             = @"ORHVcRIOModelSetPointsChanged";
NSString* ORHVcRIOModelMeasuredValuesChanged        = @"ORHVcRIOModelMeasuredValuesChanged";
NSString* ORHVcRIOModelSetPointFileChanged          = @"ORHVcRIOModelSetPointFileChanged";
NSString* ORHVcRIOModelPostRegulationFileChanged    = @"ORHVcRIOModelPostRegulationFileChanged";
NSString* ORHVcRIOModelVerboseChanged               = @"ORHVcRIOModelVerboseChanged";
NSString* ORHVcRIOModelShowFormattedDatesChanged    = @"ORHVcRIOModelShowFormattedDatesChanged";
NSString* ORHVcRIOModelPostRegulationPointAdded     = @"ORHVcRIOModelPostRegulationPointAdded";
NSString* ORHVcRIOModelPostRegulationPointRemoved   = @"ORHVcRIOModelPostRegulationPointRemoved";
NSString* ORHVcRIOModelUpdatePostRegulationTable    = @"ORHVcRIOModelUpdatePostRegulationTable";
NSString* ORHVcRIOModelPollTimeChanged              = @"ORHVcRIOModelPollTimeChanged";
NSString* ORHVcRIOModelMainSpecRamping              = @"ORHVcRIOModelMainSpecRamping";
NSString* ORHVcRIOModelMainSpecPostRegRamping       = @"ORHVcRIOModelMainSpecPostRegRamping";
NSString* ORHVcRIOModelMainSpecPostRegAPRRamping    = @"ORHVcRIOModelMainSpecPostRegAPRRamping";
NSString* ORHVcRIOModelMainSpecRampSuccess          = @"ORHVcRIOModelMainSpecRampSuccess";
NSString* ORHVcRIOModelMainSpecRampFailure          = @"ORHVcRIOModelMainSpecRampFailure";
NSString* ORHVcRIOModelEstimatingScaleFactor        = @"ORHVcRIOModelEstimatingScaleFactor";
NSString* ORHVcRIOModelPostRegPrecisionChanged      = @"ORHVcRIOModelPostRegPrecisionChanged";
NSString* ORHVcRIOModelPostRegAPRPrecisionChanged   = @"ORHVcRIOModelPostRegAPRPrecissionChanged";
NSString* ORHVcRIOModelPostRegAPRTimeoutChanged     = @"ORHVcRIOModelPostRegAPRTimeoutChanged";
NSString* ORHVcRIOModelPostRegConfigChanged         = @"ORHVcRIOModelPostRegConfigChanged";
NSString* ORHVcRIOModelPostRegDefSFChanged          = @"ORHVcRIOModelPostRegDefSFChanged";
NSString* ORHVcRIOModelPostRegEnabledChanged        = @"ORHVcRIOModelPostRegEnabledChanged";
NSString* ORHVcRIOModelPostRegAPREnabledChanged     = @"ORHVcRIOModelPostRegAPREnabledChanged";
NSString* ORHVcRIOModelIESAPModeChanged             = @"ORHVcRIOModelSAPModeChanged";
NSString* ORHVcRIOModelVMScaleFactorChanged         = @"ORHVcRIOModelVMScaleFactorChanged";
NSString* ORHVcRIOLock						        = @"ORHVcRIOLock";


//new lists from 10/17/2017   -mah-
static NSString* setPointList[] = {
    @"Zeitstempel",    @"-",
    @"Zeitstempel",    @"-",
    @"SOLL_PXI_MODUL#WestModul0",    @"Rampe",
    @"SOLL_PXI_MODUL#WestModul1",    @"Rampe",
    @"SOLL_PXI_MODUL#WestModul2",    @"Rampe",
    @"SOLL_PXI_MODUL#EastModul0",    @"Rampe",
    @"SOLL_PXI_MODUL#EastModul1",    @"Rampe",
    @"SOLL_PXI_MODUL#EastModul2",    @"Rampe",
    @"SOLL_PXI_CHANNEL#WestCh0",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#WestCh0",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#WestCh0",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#WestCh1",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#WestCh1",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#WestCh1",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#WestCh2",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#WestCh2",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#WestCh2",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#WestCh3",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#WestCh3",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#WestCh3",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#WestCh4",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#WestCh4",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#WestCh4",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#WestCh5",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#WestCh5",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#WestCh5",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#WestCh6",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#WestCh6",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#WestCh6",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#WestCh7",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#WestCh7",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#WestCh7",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#WestCh8",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#WestCh8",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#WestCh8",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#WestCh9",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#WestCh9",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#WestCh9",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#WestCh10",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#WestCh10",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#WestCh10",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#WestCh11",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#WestCh11",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#WestCh11",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#WestCh12",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#WestCh12",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#WestCh12",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#WestCh13",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#WestCh13",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#WestCh13",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#WestCh14",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#WestCh14",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#WestCh14",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#WestCh15",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#WestCh15",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#WestCh15",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#WestCh16",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#WestCh16",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#WestCh16",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#WestCh17",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#WestCh17",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#WestCh17",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#WestCh18",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#WestCh18",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#WestCh18",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#WestCh19",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#WestCh19",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#WestCh19",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#WestCh20",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#WestCh20",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#WestCh20",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#WestCh21",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#WestCh21",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#WestCh21",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#WestCh22",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#WestCh22",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#WestCh22",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#WestCh23",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#WestCh23",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#WestCh23",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#EastCh0",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#EastCh0",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#EastCh0",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#EastCh1",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#EastCh1",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#EastCh1",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#EastCh2",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#EastCh2",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#EastCh2",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#EastCh3",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#EastCh3",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#EastCh3",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#EastCh4",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#EastCh4",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#EastCh4",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#EastCh5",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#EastCh5",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#EastCh5",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#EastCh6",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#EastCh6",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#EastCh6",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#EastCh7",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#EastCh7",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#EastCh7",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#EastCh8",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#EastCh8",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#EastCh8",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#EastCh9",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#EastCh9",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#EastCh9",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#EastCh10",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#EastCh10",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#EastCh10",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#EastCh11",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#EastCh11",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#EastCh11",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#EastCh12",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#EastCh12",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#EastCh12",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#EastCh13",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#EastCh13",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#EastCh13",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#EastCh14",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#EastCh14",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#EastCh14",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#EastCh15",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#EastCh15",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#EastCh15",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#EastCh16",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#EastCh16",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#EastCh16",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#EastCh17",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#EastCh17",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#EastCh17",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#EastCh18",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#EastCh18",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#EastCh18",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#EastCh19",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#EastCh19",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#EastCh19",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#EastCh20",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#EastCh20",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#EastCh20",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#EastCh21",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#EastCh21",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#EastCh21",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#EastCh22",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#EastCh22",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#EastCh22",    @"U_EXAKT",
    @"SOLL_PXI_CHANNEL#EastCh23",    @"U_SOLL",
    @"SOLL_PXI_CHANNEL#EastCh23",    @"I_MAX",
    @"SOLL_PXI_CHANNEL#EastCh23",    @"U_EXAKT",
    @"SOLL_EHV#mainSpecVesel",    @"U_Soll",
    @"SOLL_EHV#mainSpecVesel",    @"I_MAX",
    @"SOLL_EHV#mainSpecVesel",    @"Rampe",
    @"SOLL_EHV#mainSpecElektrode",    @"U_Soll",
    @"SOLL_EHV#mainSpecElektrode",    @"I_MAX",
    @"SOLL_EHV#mainSpecElektrode",    @"Rampe",
    @"SOLL_EHV#mainSpecCorrSouth",    @"U_Soll",
    @"SOLL_EHV#mainSpecCorrSouth",    @"I_MAX",
    @"SOLL_EHV#mainSpecCorrSouth",    @"Rampe",
    @"SOLL_EHV#mainSpecCorrWest",    @"U_Soll",
    @"SOLL_EHV#mainSpecCorrWest",    @"I_MAX",
    @"SOLL_EHV#mainSpecCorrWest",    @"Rampe",
    @"SOLL_EHV#mainSpecDipolWest",    @"U_Soll",
    @"SOLL_EHV#mainSpecDipolWest",    @"I_MAX",
    @"SOLL_EHV#mainSpecDipolWest",    @"Rampe",
    @"SOLL_EHV#mainSpecDipolEast",    @"U_Soll",
    @"SOLL_EHV#mainSpecDipolEast",    @"I_MAX",
    @"SOLL_EHV#mainSpecDipolEast",    @"Rampe",
    @"SOLL_EHV#IECommon",    @"U_Soll",
    @"SOLL_EHV#IECommon",    @"I_MAX",
    @"SOLL_EHV#IECommon",    @"Rampe",
    @"SOLL_EHV#preSpecVesel",    @"U_Soll",
    @"SOLL_EHV#preSpecVesel",    @"I_MAX",
    @"SOLL_EHV#preSpecVesel",    @"Rampe",
    @"SOLL_EHV#preSpecIE1",    @"U_Soll",
    @"SOLL_EHV#preSpecIE1",    @"I_MAX",
    @"SOLL_EHV#preSpecIE1",    @"Rampe",
    @"SOLL_EHV#preSpecIE2",    @"U_Soll",
    @"SOLL_EHV#preSpecIE2",    @"I_MAX",
    @"SOLL_EHV#preSpecIE2",    @"Rampe",
    @"SOLL_EHV#preSpecIE3",    @"U_Soll",
    @"SOLL_EHV#preSpecIE3",    @"I_MAX",
    @"SOLL_EHV#preSpecIE3",    @"Rampe",
    @"SOLL_EHV#preSpecIE4",    @"U_Soll",
    @"SOLL_EHV#preSpecIE4",    @"I_MAX",
    @"SOLL_EHV#preSpecIE4",    @"Rampe",
    @"SOLL_STATUS#Ost_Relais",    @"Bed",
    @"SOLL_STATUS#Ost_Relais",    @"Modus",
    @"SOLL_STATUS#Ost_Relais",    @"Time_On",
    @"SOLL_STATUS#Ost_Relais",    @"Time_Off",
    @"SOLL_STATUS#West_Relais",    @"Bed",
    @"SOLL_STATUS#West_Relais",    @"Modus",
    @"SOLL_STATUS#West_Relais",    @"Time_On",
    @"SOLL_STATUS#West_Relais",    @"Time_Off",
    @"SOLL_EHV#postReg",    @"U_Soll",
    @"SOLL_EHV#postRegInhibit",    @"Status",
    @"SOLL_EHV#postRegPIDSoll",    @"U_Soll",
    @"SOLL_EHV#postRegPIDBed",    @"Regelung aktiv",
    @"", @""
};



static NSString* measuredValueList[] = {
    @"Zeitstempel",    @"-",
    @"Zeitstempel",    @"-",
    @"IST_PXI_MODUL#WestModul0",    @"Temperatur Board",
    @"IST_PXI_MODUL#WestModul0",    @"24 Spannung",
    @"IST_PXI_MODUL#WestModul0",    @"5V Spannung",
    @"IST_PXI_MODUL#WestModul0",    @"Rampe",
    @"IST_PXI_MODUL#WestModul0",    @"Warnung",
    @"IST_PXI_MODUL#WestModul0",    @"Fehler",
    @"IST_PXI_MODUL#WestModul1",    @"Temperatur Board",
    @"IST_PXI_MODUL#WestModul1",    @"24 Spannung",
    @"IST_PXI_MODUL#WestModul1",    @"5V Spannung",
    @"IST_PXI_MODUL#WestModul1",    @"Rampe",
    @"IST_PXI_MODUL#WestModul1",    @"Warnung",
    @"IST_PXI_MODUL#WestModul1",    @"Fehler",
    @"IST_PXI_MODUL#WestModul2",    @"Temperatur Board",
    @"IST_PXI_MODUL#WestModul2",    @"24 Spannung",
    @"IST_PXI_MODUL#WestModul2",    @"5V Spannung",
    @"IST_PXI_MODUL#WestModul2",    @"Rampe",
    @"IST_PXI_MODUL#WestModul2",    @"Warnung",
    @"IST_PXI_MODUL#WestModul2",    @"Fehler",
    @"IST_PXI_MODUL#EastModul0",    @"Temperatur Board",
    @"IST_PXI_MODUL#EastModul0",    @"24 Spannung",
    @"IST_PXI_MODUL#EastModul0",    @"5V Spannung",
    @"IST_PXI_MODUL#EastModul0",    @"Rampe",
    @"IST_PXI_MODUL#EastModul0",    @"Warnung",
    @"IST_PXI_MODUL#EastModul0",    @"Fehler",
    @"IST_PXI_MODUL#EastModul1",    @"Temperatur Board",
    @"IST_PXI_MODUL#EastModul1",    @"24 Spannung",
    @"IST_PXI_MODUL#EastModul1",    @"5V Spannung",
    @"IST_PXI_MODUL#EastModul1",    @"Rampe",
    @"IST_PXI_MODUL#EastModul1",    @"Warnung",
    @"IST_PXI_MODUL#EastModul1",    @"Fehler",
    @"IST_PXI_MODUL#EastModul2",    @"Temperatur Board",
    @"IST_PXI_MODUL#EastModul2",    @"24 Spannung",
    @"IST_PXI_MODUL#EastModul2",    @"5V Spannung",
    @"IST_PXI_MODUL#EastModul2",    @"Rampe",
    @"IST_PXI_MODUL#EastModul2",    @"Warnung",
    @"IST_PXI_MODUL#EastModul2",    @"Fehler",
    @"IST_EHV#mainSpecVessel",    @"U_SOLL",
    @"IST_EHV#mainSpecVessel",    @"U_IST",
    @"IST_EHV#mainSpecVessel",    @"I_MAX",
    @"IST_EHV#mainSpecVessel",    @"I_IST",
    @"IST_EHV#mainSpecVessel",    @"Rampe",
    @"IST_EHV#mainSpecVessel",    @"I_Begrenzt",
    @"IST_EHV#mainSpecVessel",    @"Warnung",
    @"IST_EHV#mainSpecVessel",    @"Fehler",
    @"IST_EHV#mainSpecElektrode",    @"U_SOLL",
    @"IST_EHV#mainSpecElektrode",    @"U_IST",
    @"IST_EHV#mainSpecElektrode",    @"I_MAX",
    @"IST_EHV#mainSpecElektrode",    @"I_IST",
    @"IST_EHV#mainSpecElektrode",    @"Rampe",
    @"IST_EHV#mainSpecElektrode",    @"I_Begrenzt",
    @"IST_EHV#mainSpecElektrode",    @"Warnung",
    @"IST_EHV#mainSpecElektrode",    @"Fehler",
    @"IST_EHV#mainSpecCorrSouth",    @"U_SOLL",
    @"IST_EHV#mainSpecCorrSouth",    @"U_IST",
    @"IST_EHV#mainSpecCorrSouth",    @"I_MAX",
    @"IST_EHV#mainSpecCorrSouth",    @"I_IST",
    @"IST_EHV#mainSpecCorrSouth",    @"Rampe",
    @"IST_EHV#mainSpecCorrSouth",    @"I_Begrenzt",
    @"IST_EHV#mainSpecCorrSouth",    @"Warnung",
    @"IST_EHV#mainSpecCorrSouth",    @"Fehler",
    @"IST_EHV#mainSpecCorrNorth",    @"U_SOLL",
    @"IST_EHV#mainSpecCorrNorth",    @"U_IST",
    @"IST_EHV#mainSpecCorrNorth",    @"I_MAX",
    @"IST_EHV#mainSpecCorrNorth",    @"I_IST",
    @"IST_EHV#mainSpecCorrNorth",    @"Rampe",
    @"IST_EHV#mainSpecCorrNorth",    @"I_Begrenzt",
    @"IST_EHV#mainSpecCorrNorth",    @"Warnung",
    @"IST_EHV#mainSpecCorrNorth",    @"Fehler",
    @"IST_EHV#mainSpecDipolWest",    @"U_SOLL",
    @"IST_EHV#mainSpecDipolWest",    @"U_IST",
    @"IST_EHV#mainSpecDipolWest",    @"I_MAX",
    @"IST_EHV#mainSpecDipolWest",    @"I_IST",
    @"IST_EHV#mainSpecDipolWest",    @"Rampe",
    @"IST_EHV#mainSpecDipolWest",    @"I_Begrenzt",
    @"IST_EHV#mainSpecDipolWest",    @"Warnung",
    @"IST_EHV#mainSpecDipolWest",    @"Fehler",
    @"IST_EHV#mainSpecDipolEast",    @"U_SOLL",
    @"IST_EHV#mainSpecDipolEast",    @"U_IST",
    @"IST_EHV#mainSpecDipolEast",    @"I_MAX",
    @"IST_EHV#mainSpecDipolEast",    @"I_IST",
    @"IST_EHV#mainSpecDipolEast",    @"Rampe",
    @"IST_EHV#mainSpecDipolEast",    @"I_Begrenzt",
    @"IST_EHV#mainSpecDipolEast",    @"Warnung",
    @"IST_EHV#mainSpecDipolEast",    @"Fehler",
    @"IST_EHV#IECommon",    @"U_SOLL",
    @"IST_EHV#IECommon",    @"U_IST",
    @"IST_EHV#IECommon",    @"I_MAX",
    @"IST_EHV#IECommon",    @"I_IST",
    @"IST_EHV#IECommon",    @"Rampe",
    @"IST_EHV#IECommon",    @"I_Begrenzt",
    @"IST_EHV#IECommon",    @"Warnung",
    @"IST_EHV#IECommon",    @"Fehler",
    @"IST_EHV#preSpecVesel",    @"U_SOLL",
    @"IST_EHV#preSpecVesel",    @"U_IST",
    @"IST_EHV#preSpecVesel",    @"I_MAX",
    @"IST_EHV#preSpecVesel",    @"I_IST",
    @"IST_EHV#preSpecVesel",    @"Rampe",
    @"IST_EHV#preSpecVesel",    @"I_Begrenzt",
    @"IST_EHV#preSpecVesel",    @"Warnung",
    @"IST_EHV#preSpecVesel",    @"Fehler",
    @"IST_EHV#preSpecIE1",    @"U_SOLL",
    @"IST_EHV#preSpecIE1",    @"U_IST",
    @"IST_EHV#preSpecIE1",    @"I_MAX",
    @"IST_EHV#preSpecIE1",    @"I_IST",
    @"IST_EHV#preSpecIE1",    @"Rampe",
    @"IST_EHV#preSpecIE1",    @"I_Begrenzt",
    @"IST_EHV#preSpecIE1",    @"Warnung",
    @"IST_EHV#preSpecIE1",    @"Fehler",
    @"IST_EHV#preSpecIE2",    @"U_SOLL",
    @"IST_EHV#preSpecIE2",    @"U_IST",
    @"IST_EHV#preSpecIE2",    @"I_MAX",
    @"IST_EHV#preSpecIE2",    @"I_IST",
    @"IST_EHV#preSpecIE2",    @"Rampe",
    @"IST_EHV#preSpecIE2",    @"I_Begrenzt",
    @"IST_EHV#preSpecIE2",    @"Warnung",
    @"IST_EHV#preSpecIE2",    @"Fehler",
    @"IST_EHV#preSpecIE3",    @"U_SOLL",
    @"IST_EHV#preSpecIE3",    @"U_IST",
    @"IST_EHV#preSpecIE3",    @"I_MAX",
    @"IST_EHV#preSpecIE3",    @"I_IST",
    @"IST_EHV#preSpecIE3",    @"Rampe",
    @"IST_EHV#preSpecIE3",    @"I_Begrenzt",
    @"IST_EHV#preSpecIE3",    @"Warnung",
    @"IST_EHV#preSpecIE3",    @"Fehler",
    @"IST_EHV#preSpecIE4",    @"U_SOLL",
    @"IST_EHV#preSpecIE4",    @"U_IST",
    @"IST_EHV#preSpecIE4",    @"I_MAX",
    @"IST_EHV#preSpecIE4",    @"I_IST",
    @"IST_EHV#preSpecIE4",    @"Rampe",
    @"IST_EHV#preSpecIE4",    @"I_Begrenzt",
    @"IST_EHV#preSpecIE4",    @"Warnung",
    @"IST_EHV#preSpecIE4",    @"Fehler",
    @"IST_cFP_STATUS#cFP35KVStatus",    @"Temperatur_1",
    @"IST_cFP_STATUS#cFP35KVStatus",    @"Temperatur_2",
    @"IST_cFP_STATUS#cFP35KVStatus",    @"Luftfeuchte",
    @"IST_cFP_STATUS#cFP35KVStatus",    @"Spannung",
    @"IST_cFP_STATUS#cFP35KVStatus",    @"Warnung",
    @"IST_cFP_STATUS#cFP35KVStatus",    @"Fehler",
    @"IST_cFP_STATUS#cFP65KVStatus",    @"Temperatur_1",
    @"IST_cFP_STATUS#cFP65KVStatus",    @"Temperatur_2",
    @"IST_cFP_STATUS#cFP65KVStatus",    @"Luftfeuchte",
    @"IST_cFP_STATUS#cFP65KVStatus",    @"Spannung",
    @"IST_cFP_STATUS#cFP65KVStatus",    @"Warnung",
    @"IST_cFP_STATUS#cFP65KVStatus",    @"Fehler",
    @"IST_cRIO_STATUS#ExpPC_SollSet",    @"Zustand",
    @"IST_cRIO_STATUS#ZEUS_SollSet",    @"Zustand",
    @"IST_cRIO_STATUS#ORCA_SollSet",    @"Zustand",
    @"IST_cRIO_STATUS#416Status_OK",    @"Zustand",
    @"IST_cRIO_STATUS#416HV_Freigabe",    @"Zustand",
    @"IST_cRIO_STATUS#416HV_aktiv",    @"Zustand",
    @"IST_cRIO_STATUS#436Status_OK",    @"Zustand",
    @"IST_cRIO_STATUS#436HV_Freigabe",    @"Zustand",
    @"IST_cRIO_STATUS#436HV_aktiv",    @"Zustand",
    @"IST_cRIO_STATUS#436VAO_AUF",    @"Zustand",
    @"IST_cRIO_STATUS#436HV_gekoppelt",    @"Zustand",
    @"IST_HV_RELAIS#Ost_Relais",    @"Zustand",
    @"IST_HV_RELAIS#West_Relais",    @"Zustand",
    @"IST_PXI_VOLTAGE#WestCh0",    @"U_IST",
    @"IST_PXI_VOLTAGE#WestCh0",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#WestCh0",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#WestCh1",    @"U_IST",
    @"IST_PXI_VOLTAGE#WestCh1",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#WestCh1",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#WestCh2",    @"U_IST",
    @"IST_PXI_VOLTAGE#WestCh2",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#WestCh2",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#WestCh3",    @"U_IST",
    @"IST_PXI_VOLTAGE#WestCh3",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#WestCh3",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#WestCh4",    @"U_IST",
    @"IST_PXI_VOLTAGE#WestCh4",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#WestCh4",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#WestCh5",    @"U_IST",
    @"IST_PXI_VOLTAGE#WestCh5",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#WestCh5",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#WestCh6",    @"U_IST",
    @"IST_PXI_VOLTAGE#WestCh6",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#WestCh6",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#WestCh7",    @"U_IST",
    @"IST_PXI_VOLTAGE#WestCh7",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#WestCh7",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#WestCh8",    @"U_IST",
    @"IST_PXI_VOLTAGE#WestCh8",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#WestCh8",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#WestCh9",    @"U_IST",
    @"IST_PXI_VOLTAGE#WestCh9",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#WestCh9",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#WestCh10",    @"U_IST",
    @"IST_PXI_VOLTAGE#WestCh10",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#WestCh10",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#WestCh11",    @"U_IST",
    @"IST_PXI_VOLTAGE#WestCh11",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#WestCh11",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#WestCh12",    @"U_IST",
    @"IST_PXI_VOLTAGE#WestCh12",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#WestCh12",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#WestCh13",    @"U_IST",
    @"IST_PXI_VOLTAGE#WestCh13",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#WestCh13",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#WestCh14",    @"U_IST",
    @"IST_PXI_VOLTAGE#WestCh14",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#WestCh14",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#WestCh15",    @"U_IST",
    @"IST_PXI_VOLTAGE#WestCh15",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#WestCh15",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#WestCh16",    @"U_IST",
    @"IST_PXI_VOLTAGE#WestCh16",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#WestCh16",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#WestCh17",    @"U_IST",
    @"IST_PXI_VOLTAGE#WestCh17",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#WestCh17",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#WestCh18",    @"U_IST",
    @"IST_PXI_VOLTAGE#WestCh18",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#WestCh18",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#WestCh19",    @"U_IST",
    @"IST_PXI_VOLTAGE#WestCh19",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#WestCh19",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#WestCh20",    @"U_IST",
    @"IST_PXI_VOLTAGE#WestCh20",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#WestCh20",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#WestCh21",    @"U_IST",
    @"IST_PXI_VOLTAGE#WestCh21",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#WestCh21",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#WestCh22",    @"U_IST",
    @"IST_PXI_VOLTAGE#WestCh22",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#WestCh22",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#WestCh23",    @"U_IST",
    @"IST_PXI_VOLTAGE#WestCh23",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#WestCh23",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#EastCh0",    @"U_IST",
    @"IST_PXI_VOLTAGE#EastCh0",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#EastCh0",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#EastCh1",    @"U_IST",
    @"IST_PXI_VOLTAGE#EastCh1",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#EastCh1",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#EastCh2",    @"U_IST",
    @"IST_PXI_VOLTAGE#EastCh2",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#EastCh2",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#EastCh3",    @"U_IST",
    @"IST_PXI_VOLTAGE#EastCh3",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#EastCh3",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#EastCh4",    @"U_IST",
    @"IST_PXI_VOLTAGE#EastCh4",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#EastCh4",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#EastCh5",    @"U_IST",
    @"IST_PXI_VOLTAGE#EastCh5",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#EastCh5",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#EastCh6",    @"U_IST",
    @"IST_PXI_VOLTAGE#EastCh6",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#EastCh6",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#EastCh7",    @"U_IST",
    @"IST_PXI_VOLTAGE#EastCh7",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#EastCh7",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#EastCh8",    @"U_IST",
    @"IST_PXI_VOLTAGE#EastCh8",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#EastCh8",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#EastCh9",    @"U_IST",
    @"IST_PXI_VOLTAGE#EastCh9",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#EastCh9",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#EastCh10",    @"U_IST",
    @"IST_PXI_VOLTAGE#EastCh10",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#EastCh10",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#EastCh11",    @"U_IST",
    @"IST_PXI_VOLTAGE#EastCh11",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#EastCh11",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#EastCh12",    @"U_IST",
    @"IST_PXI_VOLTAGE#EastCh12",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#EastCh12",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#EastCh13",    @"U_IST",
    @"IST_PXI_VOLTAGE#EastCh13",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#EastCh13",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#EastCh14",    @"U_IST",
    @"IST_PXI_VOLTAGE#EastCh14",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#EastCh14",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#EastCh15",    @"U_IST",
    @"IST_PXI_VOLTAGE#EastCh15",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#EastCh15",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#EastCh16",    @"U_IST",
    @"IST_PXI_VOLTAGE#EastCh16",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#EastCh16",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#EastCh17",    @"U_IST",
    @"IST_PXI_VOLTAGE#EastCh17",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#EastCh17",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#EastCh18",    @"U_IST",
    @"IST_PXI_VOLTAGE#EastCh18",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#EastCh18",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#EastCh19",    @"U_IST",
    @"IST_PXI_VOLTAGE#EastCh19",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#EastCh19",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#EastCh20",    @"U_IST",
    @"IST_PXI_VOLTAGE#EastCh20",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#EastCh20",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#EastCh21",    @"U_IST",
    @"IST_PXI_VOLTAGE#EastCh21",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#EastCh21",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#EastCh22",    @"U_IST",
    @"IST_PXI_VOLTAGE#EastCh22",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#EastCh22",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#EastCh23",    @"U_IST",
    @"IST_PXI_VOLTAGE#EastCh23",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#EastCh23",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#35KV_U",    @"U_IST",
    @"IST_PXI_VOLTAGE#35KV_U",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#35KV_U",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#65KV_U",    @"U_IST",
    @"IST_PXI_VOLTAGE#65KV_U",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#65KV_U",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#KAL_U1",    @"U_IST",
    @"IST_PXI_VOLTAGE#KAL_U1",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#KAL_U1",    @"Messung lauft",
    @"IST_PXI_VOLTAGE#KAL_U2",    @"U_IST",
    @"IST_PXI_VOLTAGE#KAL_U2",    @"Zeitstempel",
    @"IST_PXI_VOLTAGE#KAL_U2",    @"Messung lauft",
    @"IST_PXI_CHANNEL#WestCh0",    @"U_Soll",
    @"IST_PXI_CHANNEL#WestCh0",    @"U_IST",
    @"IST_PXI_CHANNEL#WestCh0",    @"I_MAX",
    @"IST_PXI_CHANNEL#WestCh0",    @"I_IST",
    @"IST_PXI_CHANNEL#WestCh0",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#WestCh0",    @"Warnung",
    @"IST_PXI_CHANNEL#WestCh0",    @"Fehler",
    @"IST_PXI_CHANNEL#WestCh1",    @"U_Soll",
    @"IST_PXI_CHANNEL#WestCh1",    @"U_IST",
    @"IST_PXI_CHANNEL#WestCh1",    @"I_MAX",
    @"IST_PXI_CHANNEL#WestCh1",    @"I_IST",
    @"IST_PXI_CHANNEL#WestCh1",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#WestCh1",    @"Warnung",
    @"IST_PXI_CHANNEL#WestCh1",    @"Fehler",
    @"IST_PXI_CHANNEL#WestCh2",    @"U_Soll",
    @"IST_PXI_CHANNEL#WestCh2",    @"U_IST",
    @"IST_PXI_CHANNEL#WestCh2",    @"I_MAX",
    @"IST_PXI_CHANNEL#WestCh2",    @"I_IST",
    @"IST_PXI_CHANNEL#WestCh2",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#WestCh2",    @"Warnung",
    @"IST_PXI_CHANNEL#WestCh2",    @"Fehler",
    @"IST_PXI_CHANNEL#WestCh3",    @"U_Soll",
    @"IST_PXI_CHANNEL#WestCh3",    @"U_IST",
    @"IST_PXI_CHANNEL#WestCh3",    @"I_MAX",
    @"IST_PXI_CHANNEL#WestCh3",    @"I_IST",
    @"IST_PXI_CHANNEL#WestCh3",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#WestCh3",    @"Warnung",
    @"IST_PXI_CHANNEL#WestCh3",    @"Fehler",
    @"IST_PXI_CHANNEL#WestCh4",    @"U_Soll",
    @"IST_PXI_CHANNEL#WestCh4",    @"U_IST",
    @"IST_PXI_CHANNEL#WestCh4",    @"I_MAX",
    @"IST_PXI_CHANNEL#WestCh4",    @"I_IST",
    @"IST_PXI_CHANNEL#WestCh4",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#WestCh4",    @"Warnung",
    @"IST_PXI_CHANNEL#WestCh4",    @"Fehler",
    @"IST_PXI_CHANNEL#WestCh5",    @"U_Soll",
    @"IST_PXI_CHANNEL#WestCh5",    @"U_IST",
    @"IST_PXI_CHANNEL#WestCh5",    @"I_MAX",
    @"IST_PXI_CHANNEL#WestCh5",    @"I_IST",
    @"IST_PXI_CHANNEL#WestCh5",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#WestCh5",    @"Warnung",
    @"IST_PXI_CHANNEL#WestCh5",    @"Fehler",
    @"IST_PXI_CHANNEL#WestCh6",    @"U_Soll",
    @"IST_PXI_CHANNEL#WestCh6",    @"U_IST",
    @"IST_PXI_CHANNEL#WestCh6",    @"I_MAX",
    @"IST_PXI_CHANNEL#WestCh6",    @"I_IST",
    @"IST_PXI_CHANNEL#WestCh6",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#WestCh6",    @"Warnung",
    @"IST_PXI_CHANNEL#WestCh6",    @"Fehler",
    @"IST_PXI_CHANNEL#WestCh7",    @"U_Soll",
    @"IST_PXI_CHANNEL#WestCh7",    @"U_IST",
    @"IST_PXI_CHANNEL#WestCh7",    @"I_MAX",
    @"IST_PXI_CHANNEL#WestCh7",    @"I_IST",
    @"IST_PXI_CHANNEL#WestCh7",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#WestCh7",    @"Warnung",
    @"IST_PXI_CHANNEL#WestCh7",    @"Fehler",
    @"IST_PXI_CHANNEL#WestCh8",    @"U_Soll",
    @"IST_PXI_CHANNEL#WestCh8",    @"U_IST",
    @"IST_PXI_CHANNEL#WestCh8",    @"I_MAX",
    @"IST_PXI_CHANNEL#WestCh8",    @"I_IST",
    @"IST_PXI_CHANNEL#WestCh8",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#WestCh8",    @"Warnung",
    @"IST_PXI_CHANNEL#WestCh8",    @"Fehler",
    @"IST_PXI_CHANNEL#WestCh9",    @"U_Soll",
    @"IST_PXI_CHANNEL#WestCh9",    @"U_IST",
    @"IST_PXI_CHANNEL#WestCh9",    @"I_MAX",
    @"IST_PXI_CHANNEL#WestCh9",    @"I_IST",
    @"IST_PXI_CHANNEL#WestCh9",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#WestCh9",    @"Warnung",
    @"IST_PXI_CHANNEL#WestCh9",    @"Fehler",
    @"IST_PXI_CHANNEL#WestCh10",    @"U_Soll",
    @"IST_PXI_CHANNEL#WestCh10",    @"U_IST",
    @"IST_PXI_CHANNEL#WestCh10",    @"I_MAX",
    @"IST_PXI_CHANNEL#WestCh10",    @"I_IST",
    @"IST_PXI_CHANNEL#WestCh10",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#WestCh10",    @"Warnung",
    @"IST_PXI_CHANNEL#WestCh10",    @"Fehler",
    @"IST_PXI_CHANNEL#WestCh11",    @"U_Soll",
    @"IST_PXI_CHANNEL#WestCh11",    @"U_IST",
    @"IST_PXI_CHANNEL#WestCh11",    @"I_MAX",
    @"IST_PXI_CHANNEL#WestCh11",    @"I_IST",
    @"IST_PXI_CHANNEL#WestCh11",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#WestCh11",    @"Warnung",
    @"IST_PXI_CHANNEL#WestCh11",    @"Fehler",
    @"IST_PXI_CHANNEL#WestCh12",    @"U_Soll",
    @"IST_PXI_CHANNEL#WestCh12",    @"U_IST",
    @"IST_PXI_CHANNEL#WestCh12",    @"I_MAX",
    @"IST_PXI_CHANNEL#WestCh12",    @"I_IST",
    @"IST_PXI_CHANNEL#WestCh12",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#WestCh12",    @"Warnung",
    @"IST_PXI_CHANNEL#WestCh12",    @"Fehler",
    @"IST_PXI_CHANNEL#WestCh13",    @"U_Soll",
    @"IST_PXI_CHANNEL#WestCh13",    @"U_IST",
    @"IST_PXI_CHANNEL#WestCh13",    @"I_MAX",
    @"IST_PXI_CHANNEL#WestCh13",    @"I_IST",
    @"IST_PXI_CHANNEL#WestCh13",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#WestCh13",    @"Warnung",
    @"IST_PXI_CHANNEL#WestCh13",    @"Fehler",
    @"IST_PXI_CHANNEL#WestCh14",    @"U_Soll",
    @"IST_PXI_CHANNEL#WestCh14",    @"U_IST",
    @"IST_PXI_CHANNEL#WestCh14",    @"I_MAX",
    @"IST_PXI_CHANNEL#WestCh14",    @"I_IST",
    @"IST_PXI_CHANNEL#WestCh14",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#WestCh14",    @"Warnung",
    @"IST_PXI_CHANNEL#WestCh14",    @"Fehler",
    @"IST_PXI_CHANNEL#WestCh15",    @"U_Soll",
    @"IST_PXI_CHANNEL#WestCh15",    @"U_IST",
    @"IST_PXI_CHANNEL#WestCh15",    @"I_MAX",
    @"IST_PXI_CHANNEL#WestCh15",    @"I_IST",
    @"IST_PXI_CHANNEL#WestCh15",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#WestCh15",    @"Warnung",
    @"IST_PXI_CHANNEL#WestCh15",    @"Fehler",
    @"IST_PXI_CHANNEL#WestCh16",    @"U_Soll",
    @"IST_PXI_CHANNEL#WestCh16",    @"U_IST",
    @"IST_PXI_CHANNEL#WestCh16",    @"I_MAX",
    @"IST_PXI_CHANNEL#WestCh16",    @"I_IST",
    @"IST_PXI_CHANNEL#WestCh16",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#WestCh16",    @"Warnung",
    @"IST_PXI_CHANNEL#WestCh16",    @"Fehler",
    @"IST_PXI_CHANNEL#WestCh17",    @"U_Soll",
    @"IST_PXI_CHANNEL#WestCh17",    @"U_IST",
    @"IST_PXI_CHANNEL#WestCh17",    @"I_MAX",
    @"IST_PXI_CHANNEL#WestCh17",    @"I_IST",
    @"IST_PXI_CHANNEL#WestCh17",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#WestCh17",    @"Warnung",
    @"IST_PXI_CHANNEL#WestCh17",    @"Fehler",
    @"IST_PXI_CHANNEL#WestCh18",    @"U_Soll",
    @"IST_PXI_CHANNEL#WestCh18",    @"U_IST",
    @"IST_PXI_CHANNEL#WestCh18",    @"I_MAX",
    @"IST_PXI_CHANNEL#WestCh18",    @"I_IST",
    @"IST_PXI_CHANNEL#WestCh18",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#WestCh18",    @"Warnung",
    @"IST_PXI_CHANNEL#WestCh18",    @"Fehler",
    @"IST_PXI_CHANNEL#WestCh19",    @"U_Soll",
    @"IST_PXI_CHANNEL#WestCh19",    @"U_IST",
    @"IST_PXI_CHANNEL#WestCh19",    @"I_MAX",
    @"IST_PXI_CHANNEL#WestCh19",    @"I_IST",
    @"IST_PXI_CHANNEL#WestCh19",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#WestCh19",    @"Warnung",
    @"IST_PXI_CHANNEL#WestCh19",    @"Fehler",
    @"IST_PXI_CHANNEL#WestCh20",    @"U_Soll",
    @"IST_PXI_CHANNEL#WestCh20",    @"U_IST",
    @"IST_PXI_CHANNEL#WestCh20",    @"I_MAX",
    @"IST_PXI_CHANNEL#WestCh20",    @"I_IST",
    @"IST_PXI_CHANNEL#WestCh20",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#WestCh20",    @"Warnung",
    @"IST_PXI_CHANNEL#WestCh20",    @"Fehler",
    @"IST_PXI_CHANNEL#WestCh21",    @"U_Soll",
    @"IST_PXI_CHANNEL#WestCh21",    @"U_IST",
    @"IST_PXI_CHANNEL#WestCh21",    @"I_MAX",
    @"IST_PXI_CHANNEL#WestCh21",    @"I_IST",
    @"IST_PXI_CHANNEL#WestCh21",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#WestCh21",    @"Warnung",
    @"IST_PXI_CHANNEL#WestCh21",    @"Fehler",
    @"IST_PXI_CHANNEL#WestCh22",    @"U_Soll",
    @"IST_PXI_CHANNEL#WestCh22",    @"U_IST",
    @"IST_PXI_CHANNEL#WestCh22",    @"I_MAX",
    @"IST_PXI_CHANNEL#WestCh22",    @"I_IST",
    @"IST_PXI_CHANNEL#WestCh22",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#WestCh22",    @"Warnung",
    @"IST_PXI_CHANNEL#WestCh22",    @"Fehler",
    @"IST_PXI_CHANNEL#WestCh23",    @"U_Soll",
    @"IST_PXI_CHANNEL#WestCh23",    @"U_IST",
    @"IST_PXI_CHANNEL#WestCh23",    @"I_MAX",
    @"IST_PXI_CHANNEL#WestCh23",    @"I_IST",
    @"IST_PXI_CHANNEL#WestCh23",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#WestCh23",    @"Warnung",
    @"IST_PXI_CHANNEL#WestCh23",    @"Fehler",
    @"IST_PXI_CHANNEL#EastCh0",    @"U_Soll",
    @"IST_PXI_CHANNEL#EastCh0",    @"U_IST",
    @"IST_PXI_CHANNEL#EastCh0",    @"I_MAX",
    @"IST_PXI_CHANNEL#EastCh0",    @"I_IST",
    @"IST_PXI_CHANNEL#EastCh0",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#EastCh0",    @"Warnung",
    @"IST_PXI_CHANNEL#EastCh0",    @"Fehler",
    @"IST_PXI_CHANNEL#EastCh1",    @"U_Soll",
    @"IST_PXI_CHANNEL#EastCh1",    @"U_IST",
    @"IST_PXI_CHANNEL#EastCh1",    @"I_MAX",
    @"IST_PXI_CHANNEL#EastCh1",    @"I_IST",
    @"IST_PXI_CHANNEL#EastCh1",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#EastCh1",    @"Warnung",
    @"IST_PXI_CHANNEL#EastCh1",    @"Fehler",
    @"IST_PXI_CHANNEL#EastCh2",    @"U_Soll",
    @"IST_PXI_CHANNEL#EastCh2",    @"U_IST",
    @"IST_PXI_CHANNEL#EastCh2",    @"I_MAX",
    @"IST_PXI_CHANNEL#EastCh2",    @"I_IST",
    @"IST_PXI_CHANNEL#EastCh2",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#EastCh2",    @"Warnung",
    @"IST_PXI_CHANNEL#EastCh2",    @"Fehler",
    @"IST_PXI_CHANNEL#EastCh3",    @"U_Soll",
    @"IST_PXI_CHANNEL#EastCh3",    @"U_IST",
    @"IST_PXI_CHANNEL#EastCh3",    @"I_MAX",
    @"IST_PXI_CHANNEL#EastCh3",    @"I_IST",
    @"IST_PXI_CHANNEL#EastCh3",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#EastCh3",    @"Warnung",
    @"IST_PXI_CHANNEL#EastCh3",    @"Fehler",
    @"IST_PXI_CHANNEL#EastCh4",    @"U_Soll",
    @"IST_PXI_CHANNEL#EastCh4",    @"U_IST",
    @"IST_PXI_CHANNEL#EastCh4",    @"I_MAX",
    @"IST_PXI_CHANNEL#EastCh4",    @"I_IST",
    @"IST_PXI_CHANNEL#EastCh4",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#EastCh4",    @"Warnung",
    @"IST_PXI_CHANNEL#EastCh4",    @"Fehler",
    @"IST_PXI_CHANNEL#EastCh5",    @"U_Soll",
    @"IST_PXI_CHANNEL#EastCh5",    @"U_IST",
    @"IST_PXI_CHANNEL#EastCh5",    @"I_MAX",
    @"IST_PXI_CHANNEL#EastCh5",    @"I_IST",
    @"IST_PXI_CHANNEL#EastCh5",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#EastCh5",    @"Warnung",
    @"IST_PXI_CHANNEL#EastCh5",    @"Fehler",
    @"IST_PXI_CHANNEL#EastCh6",    @"U_Soll",
    @"IST_PXI_CHANNEL#EastCh6",    @"U_IST",
    @"IST_PXI_CHANNEL#EastCh6",    @"I_MAX",
    @"IST_PXI_CHANNEL#EastCh6",    @"I_IST",
    @"IST_PXI_CHANNEL#EastCh6",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#EastCh6",    @"Warnung",
    @"IST_PXI_CHANNEL#EastCh6",    @"Fehler",
    @"IST_PXI_CHANNEL#EastCh7",    @"U_Soll",
    @"IST_PXI_CHANNEL#EastCh7",    @"U_IST",
    @"IST_PXI_CHANNEL#EastCh7",    @"I_MAX",
    @"IST_PXI_CHANNEL#EastCh7",    @"I_IST",
    @"IST_PXI_CHANNEL#EastCh7",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#EastCh7",    @"Warnung",
    @"IST_PXI_CHANNEL#EastCh7",    @"Fehler",
    @"IST_PXI_CHANNEL#EastCh8",    @"U_Soll",
    @"IST_PXI_CHANNEL#EastCh8",    @"U_IST",
    @"IST_PXI_CHANNEL#EastCh8",    @"I_MAX",
    @"IST_PXI_CHANNEL#EastCh8",    @"I_IST",
    @"IST_PXI_CHANNEL#EastCh8",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#EastCh8",    @"Warnung",
    @"IST_PXI_CHANNEL#EastCh8",    @"Fehler",
    @"IST_PXI_CHANNEL#EastCh9",    @"U_Soll",
    @"IST_PXI_CHANNEL#EastCh9",    @"U_IST",
    @"IST_PXI_CHANNEL#EastCh9",    @"I_MAX",
    @"IST_PXI_CHANNEL#EastCh9",    @"I_IST",
    @"IST_PXI_CHANNEL#EastCh9",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#EastCh9",    @"Warnung",
    @"IST_PXI_CHANNEL#EastCh9",    @"Fehler",
    @"IST_PXI_CHANNEL#EastCh10",    @"U_Soll",
    @"IST_PXI_CHANNEL#EastCh10",    @"U_IST",
    @"IST_PXI_CHANNEL#EastCh10",    @"I_MAX",
    @"IST_PXI_CHANNEL#EastCh10",    @"I_IST",
    @"IST_PXI_CHANNEL#EastCh10",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#EastCh10",    @"Warnung",
    @"IST_PXI_CHANNEL#EastCh10",    @"Fehler",
    @"IST_PXI_CHANNEL#EastCh11",    @"U_Soll",
    @"IST_PXI_CHANNEL#EastCh11",    @"U_IST",
    @"IST_PXI_CHANNEL#EastCh11",    @"I_MAX",
    @"IST_PXI_CHANNEL#EastCh11",    @"I_IST",
    @"IST_PXI_CHANNEL#EastCh11",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#EastCh11",    @"Warnung",
    @"IST_PXI_CHANNEL#EastCh11",    @"Fehler",
    @"IST_PXI_CHANNEL#EastCh12",    @"U_Soll",
    @"IST_PXI_CHANNEL#EastCh12",    @"U_IST",
    @"IST_PXI_CHANNEL#EastCh12",    @"I_MAX",
    @"IST_PXI_CHANNEL#EastCh12",    @"I_IST",
    @"IST_PXI_CHANNEL#EastCh12",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#EastCh12",    @"Warnung",
    @"IST_PXI_CHANNEL#EastCh12",    @"Fehler",
    @"IST_PXI_CHANNEL#EastCh13",    @"U_Soll",
    @"IST_PXI_CHANNEL#EastCh13",    @"U_IST",
    @"IST_PXI_CHANNEL#EastCh13",    @"I_MAX",
    @"IST_PXI_CHANNEL#EastCh13",    @"I_IST",
    @"IST_PXI_CHANNEL#EastCh13",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#EastCh13",    @"Warnung",
    @"IST_PXI_CHANNEL#EastCh13",    @"Fehler",
    @"IST_PXI_CHANNEL#EastCh14",    @"U_Soll",
    @"IST_PXI_CHANNEL#EastCh14",    @"U_IST",
    @"IST_PXI_CHANNEL#EastCh14",    @"I_MAX",
    @"IST_PXI_CHANNEL#EastCh14",    @"I_IST",
    @"IST_PXI_CHANNEL#EastCh14",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#EastCh14",    @"Warnung",
    @"IST_PXI_CHANNEL#EastCh14",    @"Fehler",
    @"IST_PXI_CHANNEL#EastCh15",    @"U_Soll",
    @"IST_PXI_CHANNEL#EastCh15",    @"U_IST",
    @"IST_PXI_CHANNEL#EastCh15",    @"I_MAX",
    @"IST_PXI_CHANNEL#EastCh15",    @"I_IST",
    @"IST_PXI_CHANNEL#EastCh15",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#EastCh15",    @"Warnung",
    @"IST_PXI_CHANNEL#EastCh15",    @"Fehler",
    @"IST_PXI_CHANNEL#EastCh16",    @"U_Soll",
    @"IST_PXI_CHANNEL#EastCh16",    @"U_IST",
    @"IST_PXI_CHANNEL#EastCh16",    @"I_MAX",
    @"IST_PXI_CHANNEL#EastCh16",    @"I_IST",
    @"IST_PXI_CHANNEL#EastCh16",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#EastCh16",    @"Warnung",
    @"IST_PXI_CHANNEL#EastCh16",    @"Fehler",
    @"IST_PXI_CHANNEL#EastCh17",    @"U_Soll",
    @"IST_PXI_CHANNEL#EastCh17",    @"U_IST",
    @"IST_PXI_CHANNEL#EastCh17",    @"I_MAX",
    @"IST_PXI_CHANNEL#EastCh17",    @"I_IST",
    @"IST_PXI_CHANNEL#EastCh17",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#EastCh17",    @"Warnung",
    @"IST_PXI_CHANNEL#EastCh17",    @"Fehler",
    @"IST_PXI_CHANNEL#EastCh18",    @"U_Soll",
    @"IST_PXI_CHANNEL#EastCh18",    @"U_IST",
    @"IST_PXI_CHANNEL#EastCh18",    @"I_MAX",
    @"IST_PXI_CHANNEL#EastCh18",    @"I_IST",
    @"IST_PXI_CHANNEL#EastCh18",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#EastCh18",    @"Warnung",
    @"IST_PXI_CHANNEL#EastCh18",    @"Fehler",
    @"IST_PXI_CHANNEL#EastCh19",    @"U_Soll",
    @"IST_PXI_CHANNEL#EastCh19",    @"U_IST",
    @"IST_PXI_CHANNEL#EastCh19",    @"I_MAX",
    @"IST_PXI_CHANNEL#EastCh19",    @"I_IST",
    @"IST_PXI_CHANNEL#EastCh19",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#EastCh19",    @"Warnung",
    @"IST_PXI_CHANNEL#EastCh19",    @"Fehler",
    @"IST_PXI_CHANNEL#EastCh20",    @"U_Soll",
    @"IST_PXI_CHANNEL#EastCh20",    @"U_IST",
    @"IST_PXI_CHANNEL#EastCh20",    @"I_MAX",
    @"IST_PXI_CHANNEL#EastCh20",    @"I_IST",
    @"IST_PXI_CHANNEL#EastCh20",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#EastCh20",    @"Warnung",
    @"IST_PXI_CHANNEL#EastCh20",    @"Fehler",
    @"IST_PXI_CHANNEL#EastCh21",    @"U_Soll",
    @"IST_PXI_CHANNEL#EastCh21",    @"U_IST",
    @"IST_PXI_CHANNEL#EastCh21",    @"I_MAX",
    @"IST_PXI_CHANNEL#EastCh21",    @"I_IST",
    @"IST_PXI_CHANNEL#EastCh21",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#EastCh21",    @"Warnung",
    @"IST_PXI_CHANNEL#EastCh21",    @"Fehler",
    @"IST_PXI_CHANNEL#EastCh22",    @"U_Soll",
    @"IST_PXI_CHANNEL#EastCh22",    @"U_IST",
    @"IST_PXI_CHANNEL#EastCh22",    @"I_MAX",
    @"IST_PXI_CHANNEL#EastCh22",    @"I_IST",
    @"IST_PXI_CHANNEL#EastCh22",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#EastCh22",    @"Warnung",
    @"IST_PXI_CHANNEL#EastCh22",    @"Fehler",
    @"IST_PXI_CHANNEL#EastCh23",    @"U_Soll",
    @"IST_PXI_CHANNEL#EastCh23",    @"U_IST",
    @"IST_PXI_CHANNEL#EastCh23",    @"I_MAX",
    @"IST_PXI_CHANNEL#EastCh23",    @"I_IST",
    @"IST_PXI_CHANNEL#EastCh23",    @"I_BEGRENZT",
    @"IST_PXI_CHANNEL#EastCh23",    @"Warnung",
    @"IST_PXI_CHANNEL#EastCh23",    @"Fehler",
    @"IST_EHV#postReg",    @"U_IST",
    @"IST_EHV#postRegInhibit",    @"Inh_IST",
    @"IST_EHV#postRegStatus",    @"Status",
    @"IST_EHV#postRegStrom",    @"I_IST",
    @"IST_EHV#postRegPIDSoll",    @"U_Soll",
    @"IST_EHV#postRegPIDStell",    @"U_Stell",
    @"IST_EHV#postRegPIDStatus",    @"Regelung Status"
    @"", @""
};

#define kNumToShip  38
static NSString* itemsToShip[kNumToShip*2] = {
    @"38",  @"436-EHV-0-1001-0001-U_set",
    @"39",  @"436-EHV-0-1001-0002-U_act",
    @"40",  @"436-EHV-0-1001-0003-I_max",
    @"41",  @"436-EHV-0-1001-0004-I_act",
    @"42",  @"436-EHV-0-1001-0005-U_ramp",
    @"43",  @"436-EHV-0-1001-0030-I_limited",
    @"44",  @"436-EHV-0-1001-0031-warning",
    @"45",  @"436-EHV-0-1001-0032-error",
    @"46",  @"436-EHV-0-1002-0001-U_set",
    @"47",  @"436-EHV-0-1002-0002-U_act",
    @"48",  @"436-EHV-0-1002-0003-I_max",
    @"49",  @"436-EHV-0-1002-0004-I_act",
    @"50",  @"436-EHV-0-1002-0005-U_ramp",
    @"51",  @"436-EHV-0-1002-0030-I_limited",
    @"52",  @"436-EHV-0-1002-0031-warning",
    @"53",  @"436-EHV-0-1002-0032-error",
    @"86",  @"436-EHV-0-1003-0001-U_set",
    @"87",  @"436-EHV-0-1003-0002-U_act",
    @"88",  @"436-EHV-0-1003-0003-I_max",
    @"89",  @"436-EHV-0-1003-0004-I_act",
    @"90",  @"436-EHV-0-1003-0005-U_ramp",
    @"91",  @"436-EHV-0-1003-0030-I_limited",
    @"92",  @"436-EHV-0-1003-0031-warning",
    @"93",  @"436-EHV-0-1003-0032-error",
    @"94",  @"416-EHV-0-1001-0001-U_set",
    @"95",  @"416-EHV-0-1001-0002-U_act",
    @"96",  @"416-EHV-0-1001-0003-I_max",
    @"97",  @"416-EHV-0-1001-0004-I_act",
    @"98",  @"416-EHV-0-1001-0005-U_ramp",
    @"99",  @"416-EHV-0-1001-0030-I_limited",
    @"100", @"416-EHV-0-1001-0031-warning",
    @"101", @"416-EHV-0-1001-0032-error",
    @"303", @"436-REU-0-0201-0001-U_act",
    @"304", @"436-REU-0-0201-0020-trigger_time",
    @"305", @"436-REU-0-0201-0030-meas_flag",
    @"306", @"436-REU-0-0301-0001-U_act",
    @"307", @"436-REU-0-0301-0020-trigger_time",
    @"308", @"436-REU-0-0301-0030-meas_flag"
};

@interface ORHVcRIOModel (private)
- (void) timeout;
- (void) processNextCommandFromQueue;
- (void) pollMeasuredValues;
@end

#define kBadHVcRIOValue -999
#define kHVcRIOPort 12340

@implementation ORHVcRIOModel

- (id) init
{
    [super init];
    [[self undoManager] disableUndoRegistration];
    [self setPostRegPrecision:kHVcRIOPostRegPrecisionMin];
    [self setPostRegAPRPrecision:kHVcRIOPostRegAPRPrecisionMin];
    [self setPostRegAPRTimeout:30.0];
    [self setPostRegDefSF:(kHVcRIOScaleFactorMin+kHVcRIOScaleFactorMax)/2];
    [self setPostRegConfig:0];
    [self setPostRegEnabled:NO];
    [self setPostRegAPREnabled:NO];
    [self setIeSAPmode:NO];
    [self setVMScaleFactor:-1818.108];
    breakRampLoops = NO;
    [[self undoManager] enableUndoRegistration];
    return self;
}

- (void) dealloc
{
    [setPointFile release];
    [[NSNotificationCenter defaultCenter] removeObserver:self];
    [NSObject cancelPreviousPerformRequestsWithTarget:self];
    [buffer release];
	[cmdQueue release];
	[lastRequest release];
    [setPoints release];
    [postRegulationArray release];
    [measuredValues release];
    if([self isConnected]){
        [socket close];
        [socket setDelegate:nil];
        [socket release];
    }
    [shipValueDictionary release];
    [spIndexDictionary release];
    [mvIndexDictionary release];
    [ipAddress release];
	
	[super dealloc];
}
- (void) wakeUp
{
    if(pollTime){
        [self performSelector:@selector(pollMeasuredValues) withObject:nil afterDelay:2];
    }
    [super wakeUp];
}

- (void) sleep
{
    [NSObject cancelPreviousPerformRequestsWithTarget:self];
    [super sleep];
}
- (void) setUpImage
{
	[self setImage:[NSImage imageNamed:@"HVcRIO.tif"]];
}

- (void) makeMainController
{
	[self linkToController:@"ORHVcRIOController"];
}

#pragma mark ***Accessors
- (void) setSetPoint: (int)aIndex withValue: (double)value
{
    NSNumber* oldValue = [[setPoints objectAtIndex:aIndex] objectForKey:@"setPoint"];
    [[[self undoManager] prepareWithInvocationTarget:self] setSetPoint:aIndex withValue:[oldValue floatValue]];
    [[setPoints objectAtIndex:aIndex] setObject:[NSString stringWithFormat:@"%.6f",value] forKey:@"setPoint"];
    [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelSetPointChanged object:self];
}

- (void) setSetPointReadback: (int)aIndex withValue: (double)value
{
    [[setPoints objectAtIndex:aIndex] setObject:[NSString stringWithFormat:@"%.6f",value] forKey:@"readBack"];
    [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelSetPointChanged object:self];
}

- (void) setMeasuredValue: (int)aIndex withValue: (double)value
{
    [[measuredValues objectAtIndex:aIndex] setObject:[NSString stringWithFormat:@"%lf",value] forKey:@"value"];
    [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelSetPointChanged object:self];
}

- (void) createSetPointArray
{
    if(setPoints)[setPoints release];
    setPoints = [[NSMutableArray array] retain];
    int index = 0;
    for(;;) {
        NSMutableDictionary* dict = [NSMutableDictionary dictionary];
        [dict setObject:setPointList[index++]   forKey:@"item"];
        [dict setObject:setPointList[index++]   forKey:@"data"];
        [dict setObject:@"0"   forKey:@"setPoint"];
        [dict setObject:@"?" forKey:@"readBack"];
        [setPoints addObject:dict];
        if([setPointList[index] isEqualToString:@""])break;
    }
    if(spIndexDictionary) [spIndexDictionary release];
    spIndexDictionary = [[NSDictionary dictionaryWithObjectsAndKeys:
                          [NSNumber numberWithInt:29],  @"innerElectrodeWest",
                          [NSNumber numberWithInt:101], @"innerElectrodeEast",
                          [NSNumber numberWithInt:152], @"mainSpecSupplyVoltage",
                          [NSNumber numberWithInt:155], @"mainSpecElectrodeVoltage",
                          [NSNumber numberWithInt:170], @"ieCommonVoltage",
                          [NSNumber numberWithInt:173], @"preSpecVoltage",
                          [NSNumber numberWithInt:176], @"preSpecSouthConeVoltage",
                          [NSNumber numberWithInt:179], @"preSpecWireElectrodeVoltage",
                          [NSNumber numberWithInt:182], @"preSpecNorthConeVoltage",
                          [NSNumber numberWithInt:196], @"postRegulationVoltage",
                          [NSNumber numberWithInt:198], @"postRegulationPIDVoltage",
                          [NSNumber numberWithInt:199], @"postRegulationPIDStatus", nil] retain];
}


- (NSInteger) numSetPoints
{
    return [setPoints count];
}
- (void) createMeasuredValueArray
{
    if(measuredValues)[measuredValues release];
    measuredValues = [[NSMutableArray array] retain];
    int index = 0;
    for(;;) {
        NSMutableDictionary* dict = [NSMutableDictionary dictionary];
        [dict setObject:measuredValueList[index++]   forKey:@"item"];
        [dict setObject:measuredValueList[index++]   forKey:@"data"];
        [dict setObject:@"?" forKey:@"value"];
        [measuredValues addObject:dict];
        if([measuredValueList[index] isEqualToString:@""])break;
    }
    if(mvIndexDictionary) [mvIndexDictionary release];
    mvIndexDictionary = [[NSDictionary dictionaryWithObjectsAndKeys:
                          [NSNumber numberWithInt:38],  @"mainSpecVesselSetVoltage",
                          [NSNumber numberWithInt:39],  @"mainSpecVesselVoltage",
                          [NSNumber numberWithInt:40],  @"mainSpecVesselCurrentLimit",
                          [NSNumber numberWithInt:41],  @"mainSpecVesselCurrent",
                          [NSNumber numberWithInt:46],  @"mainSpecElectrodeSetVoltage",
                          [NSNumber numberWithInt:47],  @"mainSpecElectrodeVoltage",
                          [NSNumber numberWithInt:86],  @"ieCommonSetVoltage",
                          [NSNumber numberWithInt:87],  @"ieCommonVoltage",
                          [NSNumber numberWithInt:95],  @"preSpecVesselVoltage",
                          [NSNumber numberWithInt:103], @"preSpecIeBaseIndex",
                          [NSNumber numberWithInt:103], @"preSpecSouthConeVoltage",
                          [NSNumber numberWithInt:111], @"preSpecIeVoltage",
                          [NSNumber numberWithInt:119], @"preSpecNorthConeVoltage",
                          [NSNumber numberWithInt:306], @"k35Voltage",
                          [NSNumber numberWithInt:364], @"steepConeWestVoltage",
                          [NSNumber numberWithInt:532], @"steepConeEastVoltage",
                          [NSNumber numberWithInt:651], @"postRegSetVoltage",
                          [NSNumber numberWithInt:655], @"postRegulationPIDVoltage",
                          [NSNumber numberWithInt:677], @"postRegulationPIDStatus", nil] retain];
}

- (NSString*) measuredValueName:(NSUInteger)anIndex
{
    [self checkShipValueDictionary];
    NSString* aKey = [NSString stringWithFormat:@"%d",(int)anIndex];
    NSString* aName = [shipValueDictionary objectForKey:aKey];
    if(aName){
        return aName;
    }
    else if(anIndex < [measuredValues count]){
        NSString* part1 = [[measuredValues objectAtIndex:anIndex] objectForKey:@"item"];
        NSString* part2 = [[measuredValues objectAtIndex:anIndex] objectForKey:@"data"];
        return [part1 stringByAppendingFormat:@" %@",part2];
    }
    return [NSString stringWithFormat:@"Index %d",(int)anIndex];
}

- (NSUInteger) numMeasuredValues
{
    return [measuredValues count];
}

- (void) setSetPoints:(NSMutableArray*)anArray
{
    [anArray retain];
    [setPoints release];
    setPoints = anArray;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelSetPointsChanged object:self];
}

- (void) setMeasuredValues:(NSMutableArray*)anArray
{
    [anArray retain];
    [measuredValues release];
    measuredValues = anArray;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelSetPointsChanged object:self];
}
- (id) setPointAtIndex:(int)i
{
    if(i<[setPoints count]){
        return [[setPoints objectAtIndex:i] objectForKey:@"setPoint"];
    }
    else return nil;
}
- (id) setPointReadBackAtIndex:(int)i
{
    if(i<[setPoints count]){
        return [[setPoints objectAtIndex:i] objectForKey:@"readBack"];
    }
    else return nil;
}
- (id) setPointItem:(int)i forKey:(NSString*)aKey
{
    if(i<[setPoints count]){
        return [[setPoints objectAtIndex:i] objectForKey:aKey];
    }
    else return nil;
}

- (id) measuredValueItem:(int)i forKey:(NSString*)aKey
{
    if(i<[measuredValues count]){
        return [[measuredValues objectAtIndex:i] objectForKey:aKey];
    }
    else return nil;
}

- (id) measuredValueAtIndex:(int)i
{
    if(i<[measuredValues count]){
        return [[measuredValues objectAtIndex:i] objectForKey:@"value"];
    }
    else return nil;
}

- (NSString*) title
{
    return [NSString stringWithFormat:@"%@ (%@)",[self fullID],[self ipAddress]];
}

- (BOOL) wasConnected
{
    return wasConnected;
}

- (void) setWasConnected:(BOOL)aState
{
    wasConnected = aState;
}

- (NetSocket*) socket
{
	return socket;
}
- (void) setSocket:(NetSocket*)aSocket
{
	if(aSocket != socket)[socket close];
	[aSocket retain];
	[socket release];
	socket = aSocket;
    [socket setDelegate:self];
}

- (void) setIsConnected:(BOOL)aFlag
{
    isConnected = aFlag;
    [self setWasConnected:isConnected];
    [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelIsConnectedChanged object:self];
}

- (void) connect
{
	if(!isConnected && [ipAddress length]){
        NSLog(@"%@: trying to connect\n",[self fullID]);
		[self setSocket:[NetSocket netsocketConnectedToHost:ipAddress port:kHVcRIOPort]];
        [self setIsConnected:[socket isConnected]];
	}
	else {
        NSLog(@"%@: trying to disconnect\n",[self fullID]);
		[self setSocket:nil];
        [self setIsConnected:[socket isConnected]];
	}
}

- (BOOL) isConnected
{
    return isConnected;
}

- (NSString*) ipAddress
{
    return ipAddress;
}

- (void) setIpAddress:(NSString*)aIpAddress
{
	if(!aIpAddress)aIpAddress = @"";
    [[[self undoManager] prepareWithInvocationTarget:self] setIpAddress:ipAddress];
    
    [ipAddress autorelease];
    ipAddress = [aIpAddress copy];
	
    [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelIpAddressChanged object:self];
}

- (void) netsocketConnected:(NetSocket*)inNetSocket
{
    if(inNetSocket == socket){
        [self setIsConnected:YES];
        NSLog(@"%@: Connected\n",[self fullID]);
        
        [cmdQueue removeAllObjects];
        [self setLastRequest:nil];
    }
}

- (BOOL) expertPCControlOnly    {return expertPCControlOnly;}
- (BOOL) zeusHasControl         {return zeusHasControl;}
- (BOOL) orcaHasControl         {return orcaHasControl;}

- (void) netsocket:(NetSocket*)inNetSocket dataAvailable:(NSUInteger)inAmount
{
    if(inNetSocket == socket){
		NSString* theString = [[[[NSString alloc] initWithData:[inNetSocket readData] encoding:NSASCIIStringEncoding] autorelease] uppercaseString];
        
        if(verbose){
            NSLog(@"HVcRIO received data:\n");
            NSLog(@"%@\n",theString);
        }

        if(!stringBuffer) stringBuffer = [[NSMutableString stringWithString:theString] retain];
        else [stringBuffer appendString:theString];
        if([stringBuffer rangeOfString:@":done\n" options:NSCaseInsensitiveSearch].location != NSNotFound){
            if(verbose){
                NSLog(@"HVcRIO got end of string delimiter and will now parse the incoming string.\n");
            }
            [stringBuffer replaceOccurrencesOfString:@"+"         withString:@"" options:NSCaseInsensitiveSearch range:NSMakeRange(0,1)];//remove leading '+' if there
            [stringBuffer replaceOccurrencesOfString:@"readssps"  withString:@"read sp " options:NSCaseInsensitiveSearch range:NSMakeRange(0,[stringBuffer length])];
            [stringBuffer replaceOccurrencesOfString:@"readsmvs"  withString:@"read mv " options:NSCaseInsensitiveSearch range:NSMakeRange(0,[stringBuffer length])];
            [stringBuffer replaceOccurrencesOfString:@"writessps" withString:@"write sp " options:NSCaseInsensitiveSearch range:NSMakeRange(0,[stringBuffer length])];
            [stringBuffer replaceOccurrencesOfString:@"s:done"    withString:@"" options:NSCaseInsensitiveSearch range:NSMakeRange(0,[stringBuffer length])];
            [stringBuffer replaceOccurrencesOfString:@":done"     withString:@"" options:NSCaseInsensitiveSearch range:NSMakeRange(0,[stringBuffer length])];       
            [stringBuffer replaceOccurrencesOfString:@"\n"     withString:@"" options:NSCaseInsensitiveSearch range:NSMakeRange(0,[stringBuffer length])];
            [self parseString:stringBuffer];
            [stringBuffer release];
            stringBuffer = nil;
        }
    }
}

- (void) netsocketDisconnected:(NetSocket*)inNetSocket
{
    if(inNetSocket == socket){
        [self setIsConnected:NO];
        NSLog(@"%@: Disconnected\n",[self fullID]);
		[socket autorelease];
		socket = nil;
        [cmdQueue removeAllObjects];
        [self setLastRequest:nil];
    }
}

- (void) flushQueue
{
    [cmdQueue removeAllObjects];
    [self setLastRequest:nil];
    [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelQueCountChanged object: self];
}

- (void) parseString:(NSString*)aLine
{
    [NSObject cancelPreviousPerformRequestsWithTarget:self selector:@selector(timeout) object:nil];
    
    aLine = [aLine trimSpacesFromEnds];
    aLine = [aLine lowercaseString];
    if([aLine hasPrefix:@"write sp"]) {
        aLine = [aLine substringFromIndex:8];
        NSArray* theParts = [aLine componentsSeparatedByString:@","];
        int i;
        for(i=0;i<[theParts count];i++){
            if(i<[setPoints count]){
                float aValue = [[theParts objectAtIndex:i] floatValue];
                [self setSetPoint:i withValue:aValue];
            }
        }
        [self setLastRequest:nil];
    }
    else if([aLine hasPrefix:@"read sp"]) {
        aLine = [aLine substringFromIndex:7];
        NSArray* theParts = [aLine componentsSeparatedByString:@","];
        int i=0;
        for(i=0;i<[theParts count];i++){
            if(i<[setPoints count]){
                float readBack = [[theParts objectAtIndex:i]floatValue];
                [self setSetPointReadback:i withValue:readBack];
                
                float setValue  =    [[[setPoints objectAtIndex:i] objectForKey:@"setPoint"] floatValue];
                float diff = fabsf(setValue-readBack);
                if((i>=2) && (diff > 0.00001)){
                    NSLog(@"HVcRIO WARNING: index %i: setPoint-readBack > 0.00001 (abs(%f-%f) = %f)\n",i,setValue,readBack,diff);
                }
            }
        }
        [self setLastRequest:nil];
        [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelSetPointsChanged object: self];
    }
    
    else if([aLine hasPrefix:@"read mv"]) {
        aLine = [aLine substringFromIndex:7];
        NSArray* theParts = [aLine componentsSeparatedByString:@","];
        int i;
        for(i=0;i<[theParts count];i++){
            if(i<[measuredValues count]){
                [self setMeasuredValue:i withValue:[[theParts objectAtIndex:i]doubleValue]];
            }
        }
        [self shipRecords];
        [self setLastRequest:nil];
        
        expertPCControlOnly = [[[measuredValues objectAtIndex:146] objectForKey:@"value"] boolValue];
        zeusHasControl      = [[[measuredValues objectAtIndex:147] objectForKey:@"value"] boolValue];
        orcaHasControl      = [[[measuredValues objectAtIndex:148] objectForKey:@"value"] boolValue];
        
        [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelMeasuredValuesChanged object: self];
    }
    [self processNextCommandFromQueue];
}
#pragma mark ***Data Records
- (uint32_t) dataId { return dataId; }
- (void) setDataId: (uint32_t) DataId
{
    dataId = DataId;
}
- (void) setDataIds:(id)assigner
{
    dataId   = [assigner assignDataIds:kLongForm];
}

- (void) syncDataIdsWith:(id)anOtherDevice
{
    [self setDataId:[anOtherDevice dataId]];
}

- (void) appendDataDescription:(ORDataPacket*)aDataPacket userInfo:(NSDictionary*)userInfo
{
    //----------------------------------------------------------------------------------------
    // first add our description to the data description
    [aDataPacket addDataDescriptionItem:[self dataRecordDescription] forKey:@"HVcRIO"];
}

- (NSDictionary*) dataRecordDescription
{
    NSMutableDictionary* dataDictionary = [NSMutableDictionary dictionary];
    NSDictionary* aDictionary = [NSDictionary dictionaryWithObjectsAndKeys:
                                 @"ORHVcRIODecoderForAdc",@"decoder",
                                 [NSNumber numberWithLong:dataId],   @"dataId",
                                 [NSNumber numberWithBool:NO],       @"variable",
                                 [NSNumber numberWithLong:kHVcRIORecordSize],       @"length",
                                 nil];
    [dataDictionary setObject:aDictionary forKey:@"Temperatures"];
    
    return dataDictionary;
}

- (void) checkShipValueDictionary
{
    if(!shipValueDictionary){
        shipValueDictionary = [[NSMutableDictionary dictionary] retain];
        int i;
        int index=0;
        for(i=0;i<kNumToShip;i++){
            NSString* itemIndex = itemsToShip[index++];
            NSString* itemName  = itemsToShip[index++];
            NSString* aName = [NSString stringWithFormat:@"(%@) %@",itemIndex,itemName];
            [shipValueDictionary setObject:aName forKey:itemIndex];
        }
    }
}

- (void) shipRecords
{
    [self checkShipValueDictionary];

    time_t    ut_Time;
    time(&ut_Time);
    time_t  timeMeasured = ut_Time;

    for(NSString* aKey in shipValueDictionary){
        int j = [aKey intValue];
        if(j<[measuredValues count]){
            if([[ORGlobal sharedGlobal] runInProgress]){
                uint32_t record[kHVcRIORecordSize];
                record[0] = dataId | kHVcRIORecordSize;
                record[1] = ([self uniqueIdNumber] & 0x0000fffff);
                record[2] = (uint32_t)timeMeasured;
                record[3] = j;

                union {
                    double asDouble;
                    uint32_t asLong[2];
                } theData;
                NSString* s = [[measuredValues objectAtIndex:j]objectForKey:@"value"];
                double aValue = [s doubleValue];
                theData.asDouble = aValue;
                record[4] = theData.asLong[0];
                record[5] = theData.asLong[1];
                record[6] = 0; //spares
                record[7] = 0;
                record[8] = 0;

                [[NSNotificationCenter defaultCenter] postNotificationName:ORQueueRecordForShippingNotification
                                                                    object:[NSData dataWithBytes:record length:sizeof(int32_t)*kHVcRIORecordSize]];
            }
        }
    }
}

- (NSString*) setPointFile
{
    if(setPointFile==nil)return @"";
    else return setPointFile;
}

- (void) setSetPointFile:(NSString*)aPath
{
    [setPointFile autorelease];
    setPointFile = [aPath copy];
}

- (NSUInteger) queCount
{
	return [cmdQueue count];
}

- (BOOL) isBusy
{
    return [self queCount]!=0 || lastRequest!=nil;
}

- (NSString*) lastRequest
{
	return lastRequest;
}

- (void) setLastRequest:(NSString*)aRequest
{
	[aRequest retain];
	[lastRequest release];
	lastRequest = aRequest;    
}

- (NSString*) commonScriptMethods
{
    NSArray* selectorArray = [NSArray arrayWithObjects:
                              @"isBusy",
                              @"writeSetpoints",
                              @"readBackSetpoints",
                              @"readMeasuredValues",
                              @"readSetPointsFile:(NSString*)",
                              @"setSetPoint:(int) withValue:(float)",
                              @"setPointAtIndex:(int)",
                              @"setPointReadBackAtIndex:(int)",
                              @"measuredValueAtIndex:(int)",
                              @"pushReadBacksToSetPoints",
                              @"vesselVoltageSetPoint:(int)",
                              @"postRegulationScaleFactor:(int)",
                              @"powerSupplyOffset:(int)",
                              @"setPostRegulationScaleFactor:(int) withValue:(double)",
                              @"setPowerSupplyOffset:(int) withValue:(double)",
                              @"setVesselVoltageSetPoint:(int) withValue:(double)",
                              @"spIndex:(NSString*)",
                              @"mvIndex:(NSString*)",
                              @"readK35Voltage",
                              @"readMainSpecVesselVoltage",
                              @"readMainSpecVesselSetVoltage",
                              @"readMainSpecVesselCurrentLimit",
                              @"readMainSpecVesselCurrent",
                              @"readMainSpecElectrodeVoltage",
                              @"readMainSpecElectrodeSetVoltage",
                              @"readIeCommonVoltage",
                              @"readPostRegSetVoltage",
                              @"readSteepConesWestVoltage",
                              @"readSteepConesEastVoltage",
                              @"readVesselVoltage",
                              @"readPreSpecVesselVoltage",
                              @"readPreSpecIeVoltage:(int)",
                              @"readPreSpecSouthConeVoltage",
                              @"readPreSpecNorthConeVoltage",
                              @"readPreSpecWireElectrodeVoltage",
                              @"readPostRegPIDVoltage",
                              @"readPostRegPIDStatus"
                              @"updateVesselVoltage:(NSMutableDictionary*)",
                              @"setMainSpecSupplyVoltage:(double)",
                              @"setIeCommonVoltage:(double)",
                              @"setSteepConesVoltage:(double)",
                              @"setPostRegVoltage:(double)",
                              @"setPreSpecVesselVoltage:(double)",
                              @"setPreSpecIeVoltage:(double) withIndex:(int)",
                              @"setPreSpecSouthConeVoltage:(double)",
                              @"setPreSpecNorthConeVoltage:(double)",
                              @"setPreSpecWireElectrodeVoltage:(double)",
                              @"setPostRegPIDVoltage:(double)",
                              @"setPostRegPIDStatus:(bool)",
                              @"turnOffPostReg",
                              @"turnOffHV",
                              @"turnOffPreSpec",
                              @"getSupplyOffset:(double) forConfig:(int)",
                              @"scaleFactorCheck:(double)",
                              @"updateScaleFactor:(NSMutableDictionary*)",
                              @"getScaleFactor:(double) estimateTime:(double) withDefault:(double)",
                              @"getPostRegulationScaleFactor:(double)",
                              @"estimateScaleFactorPostReg:(double) withDefault:(double) andSupplyOffset:(int)",
                              @"setPostRegulation:(double) scaleFactor:(double)",
                              @"setVesselVoltageWithPostReg:(double) scaleFactor:(double) andSupplyOffset:(int)",
                              @"setVesselVoltageWithPostReg:(double) precision:(double) andConfig:(int)",
                              @"setVesselVoltageWithoutPostReg:(double)",
                              nil];
    
    return [selectorArray componentsJoinedByString:@"\n"];
}

- (void) setVerbose:(BOOL)aState
{
    [[[self undoManager] prepareWithInvocationTarget:self] setVerbose:verbose];
    verbose = aState;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelVerboseChanged object:self];
}

- (BOOL) showFormattedDates
{
    return showFormattedDates;
}
- (void) setShowFormattedDates:(BOOL)aState
{
    [[[self undoManager] prepareWithInvocationTarget:self] setShowFormattedDates:showFormattedDates];
    showFormattedDates = aState;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelShowFormattedDatesChanged object:self];
}

- (BOOL) verbose
{
    return verbose;
}

- (void) pushReadBacksToSetPoints
{
    int i;
    for(i=0;i<[setPoints count];i++){
        float theReadBack = [[self setPointReadBackAtIndex:i] floatValue];
        [self setSetPoint:i withValue:theReadBack];
    }
}
- (int) pollTime
{
    return pollTime;
}

- (void) setPollTime:(int)aPollTime
{
    [[[self undoManager] prepareWithInvocationTarget:self] setPollTime:pollTime];
    pollTime = aPollTime;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelPollTimeChanged object:self];
    
    if(pollTime){
        [self performSelector:@selector(pollMeasuredValues) withObject:nil afterDelay:.2];
    }
    else {
        [NSObject cancelPreviousPerformRequestsWithTarget:self selector:@selector(pollMeasuredValues) object:nil];
    }
}

- (double) vmScaleFactor
{
    return vmScaleFactor;
}

- (void) setVMScaleFactor:(double)sf
{
    if(sf == vmScaleFactor) return;
    vmScaleFactor = sf;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelVMScaleFactorChanged object:self];
}

#pragma mark ***Archival
- (id) initWithCoder:(NSCoder*)decoder
{
	self = [super initWithCoder:decoder];

	[[self undoManager] disableUndoRegistration];
    
	[self setWasConnected:       [decoder decodeBoolForKey:	 @"wasConnected"]];
    [self setIpAddress:          [decoder decodeObjectForKey:@"ORHVcRIOModelIpAddress"]];
    [self setSetPointFile:       [decoder decodeObjectForKey:@"setPointFile"]];
    [self setSetPoints:          [decoder decodeObjectForKey:@"setPoints"]];
    [self setVerbose:            [decoder decodeBoolForKey:  @"verbose"]];
    [self setShowFormattedDates: [decoder decodeBoolForKey:  @"showFormattedDates"]];
    [self setPostRegulationFile: [decoder decodeObjectForKey:@"postRegulationFile"]];
    [self setPostRegulationArray:[decoder decodeObjectForKey:@"postRegulationArray"]];
    [self setPollTime:           [decoder decodeIntForKey:   @"pollTime"]];
    [self setPostRegPrecision:   [decoder decodeDoubleForKey:@"postRegPrecision"]];
    [self setPostRegAPRPrecision:[decoder decodeDoubleForKey:@"postRegAPRPrecision"]];
    [self setPostRegAPRTimeout:  [decoder decodeDoubleForKey:@"postRegAPRTimeout"]];
    [self setPostRegDefSF:       [decoder decodeDoubleForKey:@"postRegDefSF"]];
    [self setPostRegConfig:      [decoder decodeIntForKey:   @"postRegConfig"]];
    [self setPostRegEnabled:     [decoder decodeBoolForKey:  @"postRegEnabled"]];
    [self setPostRegAPREnabled:  [decoder decodeBoolForKey:  @"postRegAPREnabled"]];
    [self setIeSAPmode:          [decoder decodeBoolForKey:  @"ieSAPmode"]];
    [self setVMScaleFactor:      [decoder decodeDoubleForKey:@"vmScaleFactor"]];
    breakRampLoops = NO;
    if(!setPoints) [self createSetPointArray];
    
    [self createMeasuredValueArray];
    if(wasConnected)[self connect];
    
	[[self undoManager] enableUndoRegistration];

	return self;
}

- (void) encodeWithCoder:(NSCoder*)encoder
{
    [super encodeWithCoder:encoder];
    [encoder encodeObject:setPointFile        forKey:@"setPointFile"];
    [encoder encodeBool:  wasConnected        forKey:@"wasConnected"];
    [encoder encodeBool:  verbose             forKey:@"verbose"];
    [encoder encodeObject:ipAddress           forKey:@"ORHVcRIOModelIpAddress"];
    [encoder encodeObject:setPoints           forKey:@"setPoints"];
    [encoder encodeBool:showFormattedDates    forKey:@"showFormattedDates"];
    [encoder encodeObject:postRegulationFile  forKey:@"postRegulationFile"];
    [encoder encodeObject:postRegulationArray forKey:@"postRegulationArray"];
    [encoder encodeInteger:pollTime           forKey:@"pollTime"];
    [encoder encodeDouble:postRegPrecision    forKey:@"postRegPrecision"];
    [encoder encodeDouble:postRegAPRPrecision forKey:@"postRegAPRPrecision"];
    [encoder encodeDouble:postRegAPRTimeout   forKey:@"postRegAPRTimeout"];
    [encoder encodeDouble:postRegDefSF        forKey:@"postRegDefSF"];
    [encoder encodeInteger:postRegConfig      forKey:@"postRegConfig"];
    [encoder encodeBool:postRegEnabled        forKey:@"postRegEnabled"];
    [encoder encodeBool:postRegAPREnabled     forKey:@"postRegAPREnabled"];
    [encoder encodeBool:ieSAPmode             forKey:@"ieSAPmode"];
    [encoder encodeDouble:vmScaleFactor       forKey:@"vmScaleFactor"];
}

#pragma mark *** Commands
- (void) writeSetpoints
{
    if([self isConnected]){
        NSMutableString* cmd = [NSMutableString stringWithString:@"write sp"];
        [cmd appendString:@":"];
        int i;
        int maxIndex = (int)[setPoints count];
        for(i=0;i<maxIndex;i++){
            float valueToWrite = [[[setPoints objectAtIndex:i] objectForKey:@"setPoint"] floatValue];
            [cmd appendFormat:@"%f",valueToWrite];
            if(i != maxIndex-1)[cmd appendString:@","];
        }
        [self writeCmdString:cmd];
    }
}

- (void) readBackSetpoints
{
    if([self isConnected]){
        [self writeCmdString:@"read sp"];
    }
}

- (void) readMeasuredValues
{
    if([self isConnected]){
        [self writeCmdString:@"read mv"];
    }
}

- (void) writeCmdString:(NSString*)aCommand
{
	if(!cmdQueue)cmdQueue = [[ORSafeQueue alloc] init];
    aCommand = [aCommand removeNLandCRs]; //no LF or CR as per KIT request
    if(verbose)NSLog(@"HVcRIO enqueued cmd: %@\n",aCommand);
	[cmdQueue enqueue:aCommand];
	[[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelQueCountChanged object: self];
	[self processNextCommandFromQueue];
}

- (void) readSetPointsFile:(NSString*) aPath
{
    [setPoints release];
    setPoints = [[NSMutableArray array] retain];
    
	[self setSetPointFile:aPath];
    NSMutableArray* anArray = [[NSArray arrayWithContentsOfFile:aPath]mutableCopy];
    [self setSetPoints: anArray];
    [anArray release];
	[[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelSetPointFileChanged object:self];
}

- (void) saveSetPointsFile:(NSString*) aPath
{
	NSString* fullFileName = [aPath stringByExpandingTildeInPath];
	NSString* s = [NSString stringWithFormat:@"%@",setPoints];
	[s writeToFile:fullFileName atomically:NO encoding:NSASCIIStringEncoding error:nil];
}

- (void) setPostRegulationArray:(NSMutableArray*)anArray
{
    [anArray retain];
    [postRegulationArray release];
    postRegulationArray = anArray;
}

- (void) readPostRegulationFile:(NSString*) aPath
{
    [self setPostRegulationFile:aPath];
    [postRegulationArray release];
    postRegulationArray = [[NSMutableArray array] retain];
    NSString* s = [NSString stringWithContentsOfFile:[aPath stringByExpandingTildeInPath]  encoding:NSASCIIStringEncoding error:nil];
    NSArray* lines = [s componentsSeparatedByString:@"\n"];
    for(NSString* aLine in lines){
        NSArray* parts = [aLine componentsSeparatedByString:@","];
        NSString* vess      = @"";
        NSString* post      = @"";
        NSString* offset    = @"";
        if([parts count]>=1)vess    = [parts objectAtIndex:0];
        if([parts count]>=2)post    = [parts objectAtIndex:1];
        if([parts count]>=3)offset  = [parts objectAtIndex:2];

        [postRegulationArray addObject:[NSMutableDictionary dictionaryWithObjectsAndKeys:vess,kVesselVoltageSetPt,post, kPostRegulationScaleFactor,offset, kPowerSupplyOffset,nil]];
    }
    
    
    [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelUpdatePostRegulationTable object:self];
}

- (void) savePostRegulationFile:(NSString*) aPath
{
    NSString* fullFileName = [aPath stringByExpandingTildeInPath];
    NSString* s = @"";
    for(NSDictionary* anEntry in postRegulationArray){
        s = [s stringByAppendingFormat:@"%f,%f,%f\n",[[anEntry objectForKey:kVesselVoltageSetPt]doubleValue],[[anEntry objectForKey:kPostRegulationScaleFactor]doubleValue],[[anEntry objectForKey:kPowerSupplyOffset]doubleValue]];
    }
    [s writeToFile:fullFileName atomically:YES encoding:NSASCIIStringEncoding error:nil];
    [self setPostRegulationFile:fullFileName];
}

- (NSString*) postRegulationFile
{
    if(!postRegulationFile)return @"";
    else return postRegulationFile;
}

- (void) setPostRegulationFile:(NSString*)aPath
{
    [[[self undoManager] prepareWithInvocationTarget:self] setPostRegulationFile:postRegulationFile];
    [aPath retain];
    [postRegulationFile release];
    postRegulationFile = aPath;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelPostRegulationFileChanged object:self];
}

- (void) addPostRegulationPoint
{
    if(!postRegulationArray)postRegulationArray = [[NSMutableArray array] retain];
    [postRegulationArray addObject:[PostRegulationPoint postRegulationPoint]];
    [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelPostRegulationPointAdded object:self];
}

- (void) removeAllPostRegulationPoints
{
    [postRegulationArray release];
    postRegulationArray = nil;
    
    [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelUpdatePostRegulationTable object:self];
}

- (void) removePostRegulationPointAtIndex:(int) anIndex
{
    if(anIndex < [postRegulationArray count]){
        [postRegulationArray removeObjectAtIndex:anIndex];
        NSDictionary* userInfo = [NSDictionary dictionaryWithObject:[NSNumber numberWithInt:anIndex] forKey:@"Index"];
        [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelPostRegulationPointRemoved object:self userInfo:userInfo];
    }
}

- (uint32_t) numPostRegulationPoints { return (uint32_t)[postRegulationArray count]; }
- (id) postRegulationPointAtIndex:(int)anIndex
{
    if(anIndex>=0 && anIndex<[postRegulationArray count])return [postRegulationArray objectAtIndex:anIndex];
    else return nil;
}
//script convenience methods
- (double) vesselVoltageSetPoint:(int)anIndex
{
    if(anIndex<[postRegulationArray count]){
        NSDictionary* anEntry = [postRegulationArray objectAtIndex:anIndex];
        return [[anEntry objectForKey:kVesselVoltageSetPt] doubleValue];
    }
    return 0;
}

- (double) postRegulationScaleFactor:(int)anIndex
{
    if(anIndex<[postRegulationArray count]){
        NSDictionary* anEntry = [postRegulationArray objectAtIndex:anIndex];
        return [[anEntry objectForKey:kPostRegulationScaleFactor] doubleValue];
    }
    return 0;
}

- (double) powerSupplyOffset:(int)anIndex
{
    if(anIndex<[postRegulationArray count]){
        NSDictionary* anEntry = [postRegulationArray objectAtIndex:anIndex];
        return [[anEntry objectForKey:kPowerSupplyOffset] doubleValue];
    }
    return 0;
}
- (void) setPostRegulationScaleFactor:(int)anIndex withValue:(double)aValue
{
    NSMutableDictionary* anEntry = nil;
    if(anIndex<[postRegulationArray count]){
        anEntry = [postRegulationArray objectAtIndex:anIndex];
    }
    else {
        anEntry = [NSMutableDictionary dictionary];
        [postRegulationArray addObject:anEntry];

    }
    [anEntry setObject:[NSNumber numberWithDouble:aValue] forKey:kPostRegulationScaleFactor];
    [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelUpdatePostRegulationTable object:self];
}

- (void) setPowerSupplyOffset:(int)anIndex withValue:(double)aValue
{
    NSMutableDictionary* anEntry = nil;
    if(anIndex<[postRegulationArray count]){
        anEntry = [postRegulationArray objectAtIndex:anIndex];
    }
    else {
        anEntry = [NSMutableDictionary dictionary];
        [postRegulationArray addObject:anEntry];
        
    }
    [anEntry setObject:[NSNumber numberWithDouble:aValue] forKey:kPowerSupplyOffset];
    [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelUpdatePostRegulationTable object:self];
}

- (void) setVesselVoltageSetPoint:(int)anIndex withValue:(double)aValue
{
    NSMutableDictionary* anEntry = nil;
    if(anIndex<[postRegulationArray count]){
        anEntry = [postRegulationArray objectAtIndex:anIndex];
    }
    else {
        anEntry = [NSMutableDictionary dictionary];
        [postRegulationArray addObject:anEntry];
    }
    [anEntry setObject:[NSNumber numberWithDouble:aValue] forKey:kVesselVoltageSetPt];
    [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelUpdatePostRegulationTable object:self];
}

- (int) spIndex:(NSString*)key
{
    return [[spIndexDictionary valueForKey:key] intValue];
}

- (int) mvIndex:(NSString*)key
{
    return [[mvIndexDictionary valueForKey:key] intValue];
}

- (double) readK35Voltage
{
    return ([[self measuredValueAtIndex:[self mvIndex:@"k35Voltage"]] doubleValue] * vmScaleFactor);
}

- (double) readMainSpecVesselVoltage
{
    return [[self measuredValueAtIndex:[self mvIndex:@"mainSpecVesselVoltage"]] doubleValue];
}

- (double) readMainSpecVesselSetVoltage
{
    return [[self measuredValueAtIndex:[self mvIndex:@"mainSpecVesselSetVoltage"]] doubleValue];
}

- (double) readMainSpecVesselCurrentLimit
{
    return [[self measuredValueAtIndex:[self mvIndex:@"mainSpecVesselCurrentLimit"]] doubleValue];
}

- (double) readMainSpecVesselCurrent
{
    return [[self measuredValueAtIndex:[self mvIndex:@"mainSpecVesselCurrent"]] doubleValue];
}

- (double) readMainSpecElectrodeVoltage
{
    return (-1 * [[self measuredValueAtIndex:[self mvIndex:@"mainSpecElectrodeVoltage"]] doubleValue]);
}

- (double) readMainSpecElectrodeSetVoltage
{
    return [[self measuredValueAtIndex:[self mvIndex:@"mainSpecElectrodeSetVoltage"]] doubleValue];
}

- (double) readIeCommonVoltage
{
    return [[self measuredValueAtIndex:[self mvIndex:@"ieCommonVoltage"]] doubleValue];
}

- (double) readPostRegSetVoltage
{
    return [[self measuredValueAtIndex:[self mvIndex:@"postRegSetVoltage"]] doubleValue];
}

- (double) readSteepConesWestVoltage
{
    return [[self measuredValueAtIndex:[self mvIndex:@"steepConeWestVoltage"]] doubleValue];
}

- (double) readSteepConesEastVoltage
{
    return [[self measuredValueAtIndex:[self mvIndex:@"steepConeEastVoltage"]] doubleValue];
}

- (double) readVesselVoltage
{
    return ([self readK35Voltage] - [self readIeCommonVoltage]);
}

- (double) readPreSpecVesselVoltage
{
    return [[self measuredValueAtIndex:[self mvIndex:@"preSpecVesselVoltage"]] doubleValue];
}

- (double) readPreSpecIeVoltage:(int)anIndex
{
    if(anIndex < 1 || anIndex > 4){
        NSLog([NSString stringWithFormat:@"ORHVcRIO: invalid pre-spec voltage index %i\n",anIndex]);
        return 0.0;
    }
    return [[self measuredValueAtIndex:([self mvIndex:@"preSpecIeBaseIndex"]+8*(anIndex-1))] doubleValue];
}

- (double) readPreSpecSouthConeVoltage
{
    return [[self measuredValueAtIndex:[self mvIndex:@"preSpecSouthConeVoltage"]] doubleValue];
}

- (double) readPreSpecNorthConeVoltage
{
    return [[self measuredValueAtIndex:[self mvIndex:@"preSpecNorthConeVoltage"]] doubleValue];
}

- (double) readPreSpecWireElectrodeVoltage
{
    return [[self measuredValueAtIndex:[self mvIndex:@"preSpecIeVoltage"]] doubleValue];
}

- (double) readPostRegPIDVoltage
{
    return [[self measuredValueAtIndex:[self mvIndex:@"postRegulationPIDVoltage"]] doubleValue];
}

- (BOOL) readPostRegPIDStatus
{
    return [[self measuredValueAtIndex:[self mvIndex:@"postRegulationPIDStatus"]] boolValue];
}

- (double) postRegPrecision
{
    return postRegPrecision;
}

- (double) postRegAPRPrecision
{
    return postRegAPRPrecision;
}

- (double) postRegAPRTimeout
{
    return postRegAPRTimeout;
}

- (double) postRegDefSF
{
    return postRegDefSF;
}

- (int) postRegConfig
{
    return postRegConfig;
}

- (BOOL) postRegEnabled
{
    return postRegEnabled;
}

- (BOOL) postRegAPREnabled
{
    return postRegAPREnabled;
}

- (BOOL) ieSAPmode
{
    return ieSAPmode;
}

- (void) updateVesselVoltage:(NSDictionary*)dict
{
    if(breakRampLoops){
        [dict release];
        mainSpecRamping = NO;
        mainSpecRampSuccess = NO;
        [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelMainSpecRampFailure object:self];
        return;
    }
    if([[dict objectForKey:@"stepCount"] intValue] >= 0)
        [NSObject cancelPreviousPerformRequestsWithTarget:self selector:@selector(updateVesselVoltage:) object:dict];
    double setPoint = [[self setPointAtIndex:[self spIndex:@"mainSpecSupplyVoltage"]] doubleValue];
    double voltage =  [self readMainSpecVesselVoltage];
    // reset the parameters if the set point has changed while ramping
    if(setPoint != [[dict objectForKey:@"setPoint"] doubleValue]){
        NSLog(@"ORHVcRIO: set point changed during ramping\n");
        int nsteps = ABS(voltage+setPoint) / kHVcRIOMainSpecRampSpeed / pollTime;
        [dict setValue:[NSNumber numberWithDouble:voltage] forKey:@"startVoltage"];
        [dict setValue:[NSNumber numberWithDouble:setPoint] forKey:@"setPoint"];
        [dict setValue:[NSNumber numberWithInt:nsteps] forKey:@"nsteps"];
        [dict setValue:[NSNumber numberWithInt:-1] forKey:@"stepCount"];
    }
    // if within 30 V of the setpoint, declare success and exit loop
    if(ABS(voltage+setPoint) < 30){
        NSLog([NSString stringWithFormat:@"ORHVcRIO: main spectrometer vessel voltage successfully ramped from %.2f V to %.2f V\n",
               -[[dict objectForKey:@"startVoltage"] doubleValue], [[dict objectForKey:@"setPoint"] doubleValue]]);
        [dict release];
        mainSpecRamping = NO;
        mainSpecRampSuccess = YES;
        [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelMainSpecRampSuccess object:self];
        return;
    }
    // increment the step counter
    [dict setValue:[NSNumber numberWithInt:([[dict objectForKey:@"stepCount"] intValue]+1)] forKey:@"stepCount"];
    NSLog(@"ORHVcRIO: updateVesselVoltage step %d of %d\n", [[dict objectForKey:@"stepCount"] intValue], [[dict objectForKey:@"nsteps"] intValue]);
    // if nsteps+3 steps have passed, possibly a timeout, try resending setpoint
    if([[dict objectForKey:@"stepCount"] intValue] < 2*([[dict objectForKey:@"nsteps"] intValue]+3)){
        if([[dict objectForKey:@"stepCount"] intValue] == [[dict objectForKey:@"nsteps"] intValue]+3){
            NSLog(@"ORHVcRIO: timeout setting main spectrometer vessel voltage, attempting to re-send set point\n");
            [self setSetPoint:[self spIndex:@"mainSpecSupplyVoltage"] withValue:setPoint];
            [self writeSetpoints];
        }
    }
    // if 2*(nsteps+3) steps have passed, declare a timeout and give up
    else{
        NSLog(@"ORHVcRIO: timeout setting main spectrometer vessel voltage after re-sending set point\n");
        [dict release];
        mainSpecRamping = NO;
        mainSpecRampSuccess = NO;
        [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelMainSpecRampFailure object:self];
        return;
    }
    // send ramping notification, wait until a new poll occurs, then call this function again
    [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelMainSpecRamping object:self];
    [self performSelector:@selector(updateVesselVoltage:) withObject:dict afterDelay:pollTime];
}

- (void) setMainSpecSupplyVoltage:(double)value
{
    // make sure the voltage is in range, then set the value and write
    NSNumber* voltage = [NSNumber numberWithDouble:MIN(ABS(value), kHVcRIOMainSpecMaxVoltage)];
    NSLog([NSString stringWithFormat:@"ORHVcRIO: setting main spectrometer supply voltage to %.2f V\n", [voltage doubleValue]]);
    [self setSetPoint:[self spIndex:@"mainSpecSupplyVoltage"] withValue:[voltage doubleValue]];
    [self writeSetpoints];
    // if the poll time is set to never, can't get feedback for the post regulation
    if(pollTime == 0){
        NSLog(@"ORHVcRIO: warning - poll time set to never, not checking main spectrometer voltage readback\n");
        return;
    }
    // if the current voltage is within 30 V of the target, declare success and exit loop
    NSNumber* currentVoltage = [NSNumber numberWithDouble:[self readMainSpecVesselVoltage]];
    if(ABS(([currentVoltage doubleValue] - value)) < 30) return;
    // get the number of expected steps based on the voltage difference, ramp speed, and poll time
    NSNumber* nsteps = [NSNumber numberWithInt:ceil(ABS([voltage doubleValue] - [currentVoltage doubleValue])
                                                       / kHVcRIOMainSpecRampSpeed / pollTime)];
    // set values in a dictionary to pass to the updating loop
    NSMutableDictionary* dict = [[NSMutableDictionary dictionaryWithObjectsAndKeys:
                                  currentVoltage,              @"startVoltage",
                                  voltage,                     @"setPoint",
                                  nsteps,                      @"nsteps",
                                  [NSNumber numberWithInt:-1], @"stepCount", nil] retain];
    mainSpecRamping = YES;
    [self updateVesselVoltage:dict];
}

- (void) setIeCommonVoltage:(double)value
{
    double voltage = MIN(ABS(value), kHVcRIOIECommonMaxVoltage);
    NSLog([NSString stringWithFormat:@"ORHVcRIO: setting IE common voltage to %.2f V\n",voltage]);
    [self setSetPoint:[self spIndex:@"ieCommonVoltage"] withValue:voltage];
    [self writeSetpoints];
}

- (void) setSteepConesVoltage:(double)value
{
    double voltage = MIN(ABS(value), kHVcRIOSteepConeMaxVoltage);
    NSLog([NSString stringWithFormat:@"ORHVcRIO: setting east and west steep cone voltages to %.2f V\n",voltage]);
    [self setSetPoint:[self spIndex:@"innerElectrodeWest"] withValue:voltage];
    [self setSetPoint:[self spIndex:@"innerElectrodeEast"] withValue:voltage];
    [self writeSetpoints];
}

- (void) setPostRegVoltage:(double)value
{
    double voltage = MIN(ABS(value), kHVcRIOPostRegOffVoltage);
    NSLog([NSString stringWithFormat:@"ORHVcRIO: setting post-regulation voltage to %.4f V\n",voltage]);
    [self setSetPoint:[self spIndex:@"postRegulationVoltage"] withValue:voltage];
    [self writeSetpoints];
}

- (void) setPreSpecVesselVoltage:(double)value
{
    double voltage = MIN(ABS(value), kHVcRIOPreSpecMaxVoltage);
    NSLog([NSString stringWithFormat:@"ORHVcRIO: setting pre-spec vessel voltage to %.2f V\n",voltage]);
    [self setSetPoint:[self spIndex:@"preSpecVoltage"] withValue:voltage];
    [self writeSetpoints];
}

- (void) setPreSpecIeVoltage:(double)value withIndex:(int)anIndex
{
    double voltage = MIN(ABS(value), kHVcRIOIECommonMaxVoltage);
    if(anIndex < 1 || anIndex > 4){
        NSLog([NSString stringWithFormat:@"ORHVcRIO: invalid pre-spec voltage index %i V\n",anIndex]);
        return;
    }
    [self setSetPoint:([self spIndex:@"preSpecVoltage"]+3*anIndex) withValue:voltage];
    [self writeSetpoints];
}

- (void) setPreSpecSouthConeVoltage:(double)value
{
    double voltage = MIN(ABS(value), kHVcRIOIECommonMaxVoltage);
    NSLog([NSString stringWithFormat:@"ORHVcRIO: setting pre-spec south cone voltage to %.2f V\n",voltage]);
    [self setSetPoint:[self spIndex:@"preSpecSouthConeVoltage"] withValue:voltage];
    [self writeSetpoints];
}

- (void) setPreSpecNorthConeVoltage:(double)value
{
    double voltage = MIN(ABS(value), kHVcRIOIECommonMaxVoltage);
    NSLog([NSString stringWithFormat:@"ORHVcRIO: setting pre-spec north cone voltage to %.2f V\n",voltage]);
    [self setSetPoint:[self spIndex:@"preSpecNorthConeVoltage"] withValue:voltage];
    [self writeSetpoints];
}

- (void) setPreSpecWireElectrodeVoltage:(double)value
{
    double voltage = MIN(ABS(value), kHVcRIOIECommonMaxVoltage);
    NSLog([NSString stringWithFormat:@"ORHVcRIO: setting pre-spec wire electrode voltage to %.2f V\n",voltage]);
    [self setSetPoint:[self spIndex:@"preSpecWireElectrodeVoltage"] withValue:voltage];
    [self writeSetpoints];
}

- (BOOL) setPostRegPIDVoltage:(double)value
{
    double voltage = ABS(value);
    if(voltage > kHVcRIOPostRegPIDMaxVoltage){
        NSLog(@"ORHVcRIO: PID voltage %.4f V is above the maximum of %.2f V - VOLTAGE NOT SET!\n",
              voltage, kHVcRIOPostRegPIDMaxVoltage);
        NSLog(@"ORHVcRIO: PID set point should be the retarding potential / %.4f\n", vmScaleFactor);
        return NO;
    }
    NSLog([NSString stringWithFormat:@"ORHVcRIO: setting post-reg PID voltage to %.2f V\n", voltage]);
    [self setSetPoint:[self spIndex:@"postRegulationPIDVoltage"] withValue:voltage];
    [self writeSetpoints];
    return YES;
}

- (void) setPostRegPIDStatus:(BOOL)status
{
    NSString* s = @"on";
    if(!status) s = @"off";
    NSLog([NSString stringWithFormat:@"ORHVcRIO: turning %@ PID regulation\n", s]);
    [self setSetPoint:[self spIndex:@"postRegulationPIDStatus"] withValue:status];
    [self writeSetpoints];
}

- (void) setPostRegPrecision:(double)value
{
    postRegPrecision = MAX(kHVcRIOPostRegPrecisionMin, MIN(kHVcRIOPostRegPrecisionMax, value));
    NSLog([NSString stringWithFormat:@"ORHVcRIO: setting post-reg precision to %.2f V\n", postRegPrecision]);
    [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelPostRegPrecisionChanged object:self];
}

- (void) setPostRegAPRPrecision:(double)value
{
    postRegAPRPrecision = MAX(kHVcRIOPostRegAPRPrecisionMin, MIN(kHVcRIOPostRegPrecisionMin, value));
    NSLog([NSString stringWithFormat:@"ORHVcRIO: setting post-reg APR precision to %.2f V\n", postRegAPRPrecision]);
    [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelPostRegAPRPrecisionChanged object:self];
}

- (void) setPostRegAPRTimeout:(double)value
{
    postRegAPRTimeout = MAX(0.0, value);
    NSLog([NSString stringWithFormat:@"ORHVcRIO: setting post-reg APR timeout to %.2f sec\n", postRegAPRTimeout]);
    [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelPostRegAPRTimeoutChanged object:self];
}

- (void) setPostRegDefSF:(double)value
{
    postRegDefSF = MAX(kHVcRIOScaleFactorMin, MIN(kHVcRIOScaleFactorMax, value));
    NSLog([NSString stringWithFormat:@"ORHVcRIO: setting default scale factor to %.2f\n", postRegDefSF]);
    [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelPostRegDefSFChanged object:self];
}

- (void) setPostRegConfig:(int)value
{
    postRegConfig = MAX(0, MIN(1, value));
    NSLog([NSString stringWithFormat:@"ORHVcRIO: setting post-reg configuration to %i\n", postRegConfig]);
    [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelPostRegConfigChanged object:self];
}

- (void) setPostRegEnabled:(BOOL)enable
{
    if(enable == postRegEnabled) return;
    postRegEnabled = enable;
    NSString* s = @"enabling";
    if(!postRegEnabled) s = @"disabling";
    NSLog([NSString stringWithFormat:@"ORHVcRIO: %@ post-regulation adjustment\n", s]);
    [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelPostRegEnabledChanged object:self];
}

- (void) setPostRegAPREnabled:(BOOL)enable
{
    if(enable == postRegAPREnabled) return;
    postRegAPREnabled = enable;
    NSString* s = @"enabling";
    if(!postRegAPREnabled) s = @"disabling";
    NSLog([NSString stringWithFormat:@"ORHVcRIO: %@ post-regulation APR control\n", s]);
    [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelPostRegAPREnabledChanged object:self];
}

- (void) setIeSAPmode:(BOOL)enable
{
    ieSAPmode = enable;
    NSString* s = @"enabling";
    if(!ieSAPmode) s = @"disabling";
    NSLog([NSString stringWithFormat:@"ORHVcRIO: %@ inner electrode SAP mode\n", s]);
    [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelIESAPModeChanged object:self];
}

- (void) setBreakRampLoops:(NSNumber*)value
{
    breakRampLoops = [value boolValue];
}

- (void) turnOffPostReg
{
    NSLog(@"ORHVcRIO: turning off post-regulation\n");
    [self setPostRegVoltage:kHVcRIOPostRegOffVoltage];
}

- (void) turnOffHV
{
    NSLog(@"ORHVcROI: turning off HV\n");
    breakRampLoops = YES;
    [self turnOffPostReg];
    [self setSteepConesVoltage:0.0];
    [self setIeCommonVoltage:0.0];
    [self setMainSpecSupplyVoltage:0.0];
    [self performSelector:@selector(setBreakRampLoops:) withObject:[NSNumber numberWithBool:NO] afterDelay:2*pollTime];
}

- (void) turnOffPreSpec
{
    NSLog(@"ORHVcROI: turning off pre-spectrometer\n");
    for(int i=1; i<=4; i++) [self setPreSpecIeVoltage:0.0 withIndex:i];
    [self setPreSpecVesselVoltage:0.0];
}

- (int) getSupplyOffset:(double)voltage forConfig:(int)config
{
    // withMoS - config=1, withoutMoS - config=0
    NSString* emessage = @"ORHVcRIO: post-regulation not tested for ";
    if(config == 0){
        if(voltage >= 6000 && voltage < 10000) return 15;
        else if(voltage >= 17000 && voltage < 19000) return 22;
        else if(voltage >= 29000 && voltage < kHVcRIOMainSpecMaxVoltage) return 24;
        else{
            NSLog([NSString stringWithFormat:@"%@%.2f V!\n",emessage,voltage]);
            return -100;
        }
    }
    else if(config == 1){
        if(voltage >= 6000 && voltage < 8000) return 23;
        else if(voltage >= 17000 && voltage < 19000) return 28;
        else if(voltage >= 30000 && voltage < kHVcRIOMainSpecMaxVoltage) return 38;
        else{
            NSLog([NSString stringWithFormat:@"%@%.2f V!\n",emessage,voltage]);
            return -100;
        }
    }
    else{
        NSLog([NSString stringWithFormat:@"ORHVcRIO: configuration %i not recognized\n", config]);
        return -100;
    }
}

- (double) scaleFactorCheck:(double)value
{
    if(value < kHVcRIOScaleFactorMin){
        NSLog([NSString stringWithFormat:@"ORHVcRIO: scale factor out of range, setting to %.2f\n", kHVcRIOScaleFactorMin]);
        return kHVcRIOScaleFactorMin;
    }
    else if(value > kHVcRIOScaleFactorMax){
        NSLog([NSString stringWithFormat:@"ORHVcRIO: scale factor out of range, setting to %.2f\n", kHVcRIOScaleFactorMax]);
        return kHVcRIOScaleFactorMax;
    }
    else return value;
}

- (void) updateScaleFactor:(NSMutableDictionary*)dict
{
    if(breakRampLoops){
        [dict release];
        scaleFactorEstimating = NO;
        return;
    }
    // if the main spectrometer is ramping, check again after a new poll
    if(mainSpecRamping){
        [self performSelector:@selector(updateScaleFactor:) withObject:dict afterDelay:pollTime];
        return;
    }
    NSNumber* defSF =     [dict objectForKey:@"defSF"];
    NSNumber* sumSF =     [dict objectForKey:@"sumSF"];
    NSNumber* nsteps =    [dict objectForKey:@"nsteps"];
    NSNumber* stepCount = [dict objectForKey:@"stepCount"];
    stepCount = [NSNumber numberWithInt:[stepCount intValue]+1];
    // get a current sample of the scale factor and add to the sum
    double sf = [self readVesselVoltage] / ([[self setPointAtIndex:[self spIndex:@"mainSpecSupplyVoltage"]] doubleValue] - [[dict objectForKey:@"offset"] doubleValue]);
    sf *= [defSF doubleValue];
    sumSF = [NSNumber numberWithDouble:[sumSF doubleValue] + sf];
    [dict setValue:[NSNumber numberWithDouble:[sumSF doubleValue]] forKey:@"sumSF"];
    [dict setValue:[NSNumber numberWithInt:[stepCount intValue]] forKey:@"stepCount"];
    // if we haven't reached nsteps, wait until a new poll and get another value
    if([stepCount intValue] < [nsteps intValue]){
        [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelEstimatingScaleFactor object:self];
        [self performSelector:@selector(updateScaleFactor:) withObject:dict afterDelay:pollTime];
    }
    // estimation is complete, add to the post regulation table, set vessel voltage with new sf
    else{
        scaleFactorEstimating = NO;
        sf = [sumSF doubleValue] / [stepCount intValue];
        if(sf != [self scaleFactorCheck:sf]){
            NSLog([NSString stringWithFormat:@"ORHVcRIO: estimated scale factor %.2f out of range, reverting to default value %.2f\n",sf,[defSF doubleValue]]);
            sf = [defSF doubleValue];
        }
        NSLog([NSString stringWithFormat:@"ORHVcRIO: setting scale factor to estimated value %.2f\n",sf]);
        double setPoint = [(NSNumber*)[dict objectForKey:@"setPoint"] doubleValue];
        double offset   = [(NSNumber*)[dict objectForKey:@"offset"]   doubleValue];
        //[dict release];
        [self setPostRegulation:setPoint scaleFactor:sf supplyOffset:offset];
        [self setVesselVoltageWithPostReg:setPoint scaleFactor:sf supplyOffset:offset];
    }
}

- (double) getPostRegulationScaleFactor:(double)voltage
{
    // check for a value in the table at the exact voltage requested
    for(int i=0; i<[self numPostRegulationPoints]; i++)
        if(voltage == [self vesselVoltageSetPoint:i])
            return [self scaleFactorCheck:[self postRegulationScaleFactor:i]];
    voltage = floor(voltage);
    // if there is an integer value in the table less than a volt below, use that value
    for(int i=0; i<[self numPostRegulationPoints]; i++)
        if(voltage == [self vesselVoltageSetPoint:i])
            return [self scaleFactorCheck:[self postRegulationScaleFactor:i]];
    // return the default value if neither of the above cases are found
    // return (7004.5 - 0.003*voltage);
    return 6999.2; // ideal default value for 18370 V
}

- (void) estimateScaleFactorPostReg:(double)voltage withDefault:(double)defSF supplyOffset:(int)offset
{
    int nsteps = 7;
    if(!pollTime){
        nsteps = 1;
        NSLog(@"ORHVcRIO: warning - poll time set to never, using previously measured vessel voltage to estimate scale factor\n");
    }
    NSMutableDictionary* dict = [NSMutableDictionary dictionaryWithObjectsAndKeys:
                                 [NSNumber numberWithDouble:0.0],     @"sumSF",
                                 [NSNumber numberWithDouble:defSF],   @"defSF",
                                 [NSNumber numberWithDouble:voltage], @"setPoint",
                                 [NSNumber numberWithDouble:offset],  @"offset",
                                 [NSNumber numberWithInt:nsteps],     @"nsteps",
                                 [NSNumber numberWithInt:0],          @"stepCount", nil];
    scaleFactorEstimating = YES;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelEstimatingScaleFactor object:self];
    [self updateScaleFactor:dict];
}

- (void) setPostRegulation:(double)voltage scaleFactor:(double)sf supplyOffset:(double)offset
{
    for(int i=0; i<[self numPostRegulationPoints]; i++){
        id point = [postRegulationArray objectAtIndex:i];
        if(![[point className] isEqualToString:@"PostRegulationPoint"]) continue;
        if(voltage == [[point objectForKey:kVesselVoltageSetPt] doubleValue]){
            NSLog([NSString stringWithFormat:@"ORHVcRIO: setting post-regulation scale factor to %f\n", sf]);
            [point setValue:[NSNumber numberWithDouble:sf] forKey:kPostRegulationScaleFactor];
            return;
        }
    }
    NSLog([NSString stringWithFormat:@"ORHVcRIO: creating new post-regulation point at %.2f V with scale factor %.2f\n",voltage,sf]);
    [self addPostRegulationPoint];
    PostRegulationPoint* point = [postRegulationArray objectAtIndex:[postRegulationArray count]-1];
    [point setValue:[NSNumber numberWithDouble:voltage] forKey:kVesselVoltageSetPt];
    [point setValue:[NSNumber numberWithDouble:sf]      forKey:kPostRegulationScaleFactor];
    [point setValue:[NSNumber numberWithDouble:offset]  forKey:kPowerSupplyOffset];
}

- (void) setVesselVoltageWithPostReg:(double)voltage scaleFactor:(double)sf supplyOffset:(int)offset
{
    voltage = MIN(ABS(voltage), kHVcRIOMainSpecMaxVoltage);
    sf = [self scaleFactorCheck:sf];
    double k35 = [self readK35Voltage];
    if(k35 == 0.0 && [self readMainSpecVesselVoltage] > 50.0){ // fixme - check on sign here
        NSLog(@"ORHVcRIO: incorrect K35 sensor reading! Aborting set voltage with post-regulation\n");
        return;
    }
    double vesselVoltage = [self readVesselVoltage];
    double mainSpecVoltage = voltage + offset;
    if(voltage > vesselVoltage){
        [self setPostRegVoltage:(voltage/sf)];
        if(ABS([self readMainSpecVesselSetVoltage] - mainSpecVoltage) > 1)
            [self setMainSpecSupplyVoltage:mainSpecVoltage];
    }
    else if(voltage < vesselVoltage){
        if(ABS([self readMainSpecVesselSetVoltage] - mainSpecVoltage) > 1)
            [self setMainSpecSupplyVoltage:mainSpecVoltage];
        [self setPostRegVoltage:(voltage/sf)];
    }
    if(voltage == k35) NSLog(@"ORHVcRIO: voltage setpoint unchanged\n");
}

- (void) updateVesselVoltageWithPostReg:(NSDictionary*)dict
{
    if(breakRampLoops){
        [dict release];
        mainSpecPostRegRamping = NO;
        mainSpecRampSuccess = NO;
        [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelMainSpecRampFailure object:self];
        return;
    }
    if([[dict objectForKey:@"stepCount"] intValue] >= 0)
        [NSObject cancelPreviousPerformRequestsWithTarget:self selector:@selector(updateVesselVoltageWithPostReg:) object:dict];
    // if ramping or scale factor estimation is in progress, wait until the next poll
    if(mainSpecRamping || scaleFactorEstimating){
        [self performSelector:@selector(updateVesselVoltageWithPostReg:) withObject:dict afterDelay:pollTime];
        return;
    }
    if(!mainSpecRampSuccess) return;
    double setPoint = [[self setPointAtIndex:[self spIndex:@"mainSpecSupplyVoltage"]] doubleValue];
    double offset = [[dict objectForKey:@"offset"] doubleValue];
    double voltage = [self readVesselVoltage];
    // check to see if the set point has been changed since starting the post regulation
    if(setPoint != [[dict objectForKey:@"setPoint"] doubleValue]/* + offset*/){
        NSLog([NSString stringWithFormat:@"ORHVcRIO: set point changed during ramping %f %f \n",setPoint,[[dict objectForKey:@"setPoint"] doubleValue]]);
        [dict setValue:[NSNumber numberWithDouble:voltage]  forKey:@"startVoltage"];
        [dict setValue:[NSNumber numberWithDouble:setPoint] forKey:@"setPoint"];
        [dict setValue:[NSNumber numberWithInt:-1]          forKey:@"stepCount"];
        [dict setValue:[NSNumber numberWithDouble:[self getPostRegulationScaleFactor:setPoint]]
                forKey:@"scaleFactor"];
    }
    // if the voltage is the required precision from the step point for 2 steps, success
    [dict setValue:[dict objectForKey:@"diff0"] forKey:@"diff1"];
    [dict setValue:[NSNumber numberWithDouble:(voltage+offset-setPoint)] forKey:@"diff0"];
    if(ABS([[dict objectForKey:@"diff0"] doubleValue]) < [[dict objectForKey:@"precision"] doubleValue] &&
       ABS([[dict objectForKey:@"diff1"] doubleValue]) < [[dict objectForKey:@"precision"] doubleValue]){
        NSLog([NSString stringWithFormat:@"ORHVcRIO: main spectrometer vessel voltage successfully ramped from %.2f V to %.2f V\n",
               -[[dict objectForKey:@"startVoltage"] doubleValue], [[dict objectForKey:@"setPoint"] doubleValue]]);
        mainSpecPostRegRamping = NO;
        if(postRegAPREnabled){
            [dict setValue:[NSNumber numberWithInt:-1] forKey:@"stepCount"];
            mainSpecPostRegAPRRamping = YES;
            [self updateVesselVoltageWithPostRegAPR:dict];
        }
        else{
            [dict release];
            mainSpecRampSuccess = YES;
            [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelMainSpecRampSuccess object:self];
        }
        return;
    }
    int stepCount = [[dict objectForKey:@"stepCount"] intValue] + 1;
    [dict setValue:[NSNumber numberWithInt:stepCount] forKey:@"stepCount"];
    // at 10 and 20 steps, estimate a new scale factor, at 30 consider it a failure
    if(stepCount % 10 == 0 && stepCount > 0){
        if(stepCount < 30){
            NSLog(@"ORHVcRIO: starting estimation of new post-regulation scale factor\n");
            double sf = [[dict objectForKey:@"scaleFactor"] doubleValue];
            [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelMainSpecPostRegRamping
                                                                object:self];
            [self estimateScaleFactorPostReg:setPoint-offset withDefault:sf supplyOffset:offset];
        }
        else{
            NSLog(@"ORHVcRIO: failed to ramp main spectrometer voltage with post-regulation\n");
            [dict release];
            mainSpecPostRegRamping = NO;
            [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelMainSpecRampFailure object:self];
            return;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelMainSpecPostRegRamping object:self];
    [self performSelector:@selector(updateVesselVoltageWithPostReg:) withObject:dict afterDelay:pollTime];
}

- (void) updateVesselVoltageWithPostRegAPR:(NSDictionary*)dict
{
    if(breakRampLoops){
        [dict release];
        mainSpecPostRegRamping = NO;
        mainSpecRampSuccess = NO;
        [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelMainSpecRampFailure object:self];
        return;
    }
    if([[dict objectForKey:@"stepCount"] intValue] >= 0)
        [NSObject cancelPreviousPerformRequestsWithTarget:self selector:@selector(updateVesselVoltageWithPostRegAPR:) object:dict];
    // if ramping or scale factor estimation is in progress, wait until the next poll
    if(mainSpecRamping || mainSpecPostRegRamping || scaleFactorEstimating){
        [self performSelector:@selector(updateVesselVoltageWithPostReg:) withObject:dict afterDelay:pollTime];
        return;
    }
    double retardingPotential = [[dict objectForKey:@"setPoint"] doubleValue] + ABS([self readIeCommonVoltage]);
    double valueAPR = retardingPotential / ABS([self vmScaleFactor]);
    NSLog(@"ORHVcRIO: activating APR with set value of %.4f\n", valueAPR);
    if([[dict objectForKey:@"stepCount"] intValue] == -1){
        if(![self setPostRegPIDVoltage:valueAPR]){
            [dict release];
            mainSpecPostRegAPRRamping = NO;
            mainSpecRampSuccess = NO;
            [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelMainSpecRampFailure object:self];
            return;
        }
        else [self setPostRegPIDStatus:YES];

    }
    int stepCount = [[dict objectForKey:@"stepCount"] intValue] + 1;
    [dict setValue:[NSNumber numberWithInt:stepCount] forKey:@"stepCount"];
    if(ABS(retardingPotential - [self readK35Voltage]) < postRegAPRPrecision){
        NSLog(@"ORHVcRIO: successfully tuned vessel voltage with APR to %.4f V\n",
              [[dict objectForKey:@"setPoint"] doubleValue]);
        [dict release];
        mainSpecPostRegAPRRamping = NO;
        mainSpecRampSuccess = YES;
        [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelMainSpecRampSuccess object:self];
        return;
    }
    else if(stepCount * pollTime >= postRegAPRTimeout){
        NSLog(@"ORHVcRIO: timed out ramping main spectrometer voltage to %.4f V with APR precision of %0.4f V\n",
              [[dict objectForKey:@"setPoint"] doubleValue], postRegAPRPrecision);
        [dict release];
        mainSpecPostRegAPRRamping = NO;
        mainSpecRampSuccess = NO;
        [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelMainSpecRampFailure object:self];
        return;
    }
    else{
        [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelMainSpecPostRegAPRRamping object:self];
        [self performSelector:@selector(updateVesselVoltageWithPostRegAPR:) withObject:dict afterDelay:pollTime];
    }
}

- (void) setVesselVoltageWithPostReg:(double)voltage precision:(double)precision config:(int)config
{
    breakRampLoops = NO;
    if(postRegAPREnabled) [self setPostRegPIDStatus:NO];
    double sf =  [self getPostRegulationScaleFactor:voltage];
    // need to take care of the case where the scale factor isn't in the post-regulation table
    int offset = [self getSupplyOffset:voltage forConfig:config];
    [self setVesselVoltageWithPostReg:voltage scaleFactor:sf supplyOffset:offset];
    if(!pollTime){
        NSLog(@"ORHVcRIO: warning - poll time set to never, not performing precision voltage adjustment\n");
        return;
    }
    double vesselVoltage = [self readVesselVoltage];
    NSMutableDictionary* dict = [[NSMutableDictionary dictionaryWithObjectsAndKeys:
                                  [NSNumber numberWithDouble:vesselVoltage], @"startVoltage",
                                  [NSNumber numberWithDouble:voltage],       @"setPoint",
                                  [NSNumber numberWithDouble:sf],            @"scaleFactor",
                                  [NSNumber numberWithDouble:offset],        @"offset",
                                  [NSNumber numberWithDouble:precision],     @"precision",
                                  [NSNumber numberWithDouble:(voltage-vesselVoltage)], @"diff0",
                                  [NSNumber numberWithDouble:(2*precision)], @"diff1",
                                  [NSNumber numberWithInt:-1],               @"stepCount", nil] retain];
    mainSpecPostRegRamping = YES;
    [self updateVesselVoltageWithPostReg:dict];
}

- (void) setVesselVoltageWithoutPostReg:(double)voltage
{
    breakRampLoops = NO;
    if(postRegAPREnabled) [self setPostRegPIDStatus:NO];
    [self turnOffPostReg];
    [self setMainSpecSupplyVoltage:voltage];
}

#pragma mark •••Adc or Bit Processing Protocol
- (void) processIsStarting
{
    //called when processing is started. nothing to do for now.
    //called at the HW polling rate in the process dialog.
    //For now we just use the local polling
}

- (void)processIsStopping
{
    //called when processing is stopping. nothing to do for now.
}

- (void) startProcessCycle
{
    //called at the HW polling rate in the process dialog.
    //ignore for now.
}

- (void) endProcessCycle
{
}

- (NSString*) processingTitle
{
    NSString* s =  [[self fullID] substringFromIndex:2];
    s = [s stringByReplacingOccurrencesOfString:@"Model" withString:@""];
    return s;
}

- (void) setProcessOutput:(int)channel value:(int)value
{
    //nothing to do
}

- (BOOL) processValue:(int)channel
{
    return [self convertedValue:channel]!=0;
}

- (double) convertedValue:(int)channel
{
    id mv = [[[self measuredValueAtIndex:channel] copy] autorelease];
    if(mv){ if(![mv respondsToSelector:@selector(doubleValue)]) return 0.0; }
    else return 0.0;
    return [mv doubleValue];
}

- (double) maxValueForChan:(int)channel
{
    return 1000; // return something if channel number out of range
}

- (double) lowAlarm:(int)channel
{
    return 0;
}

- (double) highAlarm:(int)channel
{
    return 0;
}

- (double) minValueForChan:(int)channel
{
    return 0; // return something if channel number out of range
}

//alarm limits for the processing framework.
- (void) getAlarmRangeLow:(double*)theLowLimit high:(double*)theHighLimit  channel:(int)channel
{
    *theLowLimit  =  0 ;
    *theHighLimit = 0 ;
}
@end


@implementation ORHVcRIOModel (private)
- (void) timeout
{
	@synchronized (self){
		[NSObject cancelPreviousPerformRequestsWithTarget:self selector:@selector(timeout) object:nil];
		NSLogError(@"command timeout",@"HVcRIO",nil);
		[self setLastRequest:nil];
        [stringBuffer release];
        stringBuffer = nil;
		[cmdQueue removeAllObjects]; //if we timeout we just flush the queue
		[[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelQueCountChanged object: self];
	}
}

- (void) processNextCommandFromQueue
{
    if(lastRequest)return;
	if([cmdQueue count] > 0){
		NSString* cmd = [cmdQueue dequeue];
		[[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelQueCountChanged object: self];
        [self setLastRequest:cmd];
        [socket writeString:cmd encoding:NSASCIIStringEncoding];
        if(verbose)NSLog(@"HVcRIO sent cmd: %@\n",cmd);
        [self performSelector:@selector(timeout) withObject:nil afterDelay:10];//<----timeout !!!!!!!!!!!!!!!!!!!!
	}
}

- (void) pollMeasuredValues
{
    [NSObject cancelPreviousPerformRequestsWithTarget:self selector:@selector(pollMeasuredValues) object:nil];
    [self readMeasuredValues];
    if(pollTime)[self performSelector:@selector(pollMeasuredValues) withObject:nil afterDelay:pollTime];
}
@end

//------------------------------------------------------------------------

@implementation PostRegulationPoint
@synthesize data;

+ (id) postRegulationPoint
{
    PostRegulationPoint* aPoint = [[PostRegulationPoint alloc] init];
    return [aPoint autorelease];
}

- (id) init
{
    self = [super init];
    NSMutableDictionary* data        = [NSMutableDictionary dictionary];
    [data setObject:@"" forKey:kVesselVoltageSetPt];
    [data setObject:@"" forKey:kPostRegulationScaleFactor];
    [data setObject:@"" forKey:kPowerSupplyOffset];
    self.data = data;
    return self;
}

- (void) dealloc
{
    self.data = nil;
    [super dealloc];
}


- (id) copyWithZone:(NSZone *)zone
{
    PostRegulationPoint* copy = [[PostRegulationPoint alloc] init];
    copy.data = [[data copyWithZone:zone] autorelease];
    return copy;
}

- (void) setValue:(id)anObject forKey:(id)aKey
{
    if(!anObject)anObject = @"";
    [[[[ORGlobal sharedGlobal] undoManager] prepareWithInvocationTarget:self] setValue:[data objectForKey:aKey] forKey:aKey];
    
    [data setObject:anObject forKey:aKey];
    [[NSNotificationCenter defaultCenter] postNotificationName:ORHVcRIOModelUpdatePostRegulationTable object:self];
}

- (id) objectForKey:(id)aKey
{
    id obj =  [data objectForKey:aKey];
    if(!obj)return @"-";
    else return obj;
}


- (id) initWithCoder:(NSCoder*)decoder
{
    self = [super init];
    self.data    = [decoder decodeObjectForKey:@"data"];
    return self;
}
- (void) encodeWithCoder:(NSCoder*)encoder
{
    [encoder encodeObject:data  forKey:@"data"];
}


@end

