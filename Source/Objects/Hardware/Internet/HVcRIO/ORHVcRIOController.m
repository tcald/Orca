//--------------------------------------------------------
// ORHVcRIOController
// Created by Mark  A. Howe on Oct 17, 2017
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2017, University of North Carolina. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of
//North Carolina sponsored in part by the United States
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020.
//The University has certain rights in the program pursuant to
//the contract and the program should not be copied or distributed
//outside your organization.  The DOE and the University of
//North Carolina reserve all rights in the program. Neither the authors,
//University of North Carolina, or U.S. Government make any warranty,
//express or implied, or assume any liability or responsibility
//for the use of this software.
//-------------------------------------------------------------

#pragma mark ***Imported Files

#import "ORHVcRIOController.h"
#import "ORHVcRIOModel.h"
#import "ORValueBarGroupView.h"
#import "ORAxis.h"

#define kSecsBetween1904and1070 2082844800

@implementation ORHVcRIOController

#pragma mark ***Initialization
- (id) init
{
	self = [super initWithWindowNibName:@"HVcRIO"];
	return self;
}

- (void) awakeFromNib
{
    [[queueValueBar xAxis] setRngLimitsLow:0 withHigh:300 withMinRng:10];
    [[queueValueBar xAxis] setRngDefaultsLow:0 withHigh:300];
    [pollTimeTextField setStringValue:[pollTimePU title]];
    [mainSpecBox setFillColor:[NSColor colorWithRed:0.2 green:0.3 blue:0.5 alpha:0.1]];
    [preSpecBox setFillColor:[NSColor colorWithRed:0.2 green:0.3 blue:0.5 alpha:0.1]];
    //[mainSpecOffButton setImage:[NSImage imageNamed:@"VoltageOff"]];
    [mainSpecOffButton setTitle:@"Turn Off\nMain Spec\nHV"];
    //[postRegOffButton setImage:[NSImage imageNamed:@"VoltageOff"]];
    [postRegOffButton setTitle:@"Post\nRegulation\nOff"];
    //[preSpecOffButton setImage:[NSImage imageNamed:@"VoltageOff"]];
    [preSpecOffButton setTitle:@"Turn Off\nPre Spec\nHV"];
    [self currentSetPoints];
    double dv = [model readVesselVoltage] - [model readMainSpecVesselSetVoltage];
    if([model pollTime])
        [mainSpecStatusTextField setStringValue:[NSString stringWithFormat:@"%.2f V from setpoint", dv]];
    else [mainSpecStatusTextField setStringValue:@"Unkown"];
    [mainSpecStatusTextField setTextColor:[NSColor labelColor]];
    
	[super awakeFromNib];
}

#pragma mark ***Notifications

- (void) registerNotificationObservers
{
	NSNotificationCenter* notifyCenter = [NSNotificationCenter defaultCenter];
    [super registerNotificationObservers];
		
    [notifyCenter addObserver : self
                     selector : @selector(ipAddressChanged:)
                         name : ORHVcRIOModelIpAddressChanged
						object: model];
    
    [notifyCenter addObserver : self
                     selector : @selector(isConnectedChanged:)
                         name : ORHVcRIOModelIsConnectedChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORRunStatusChangedNotification
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORHVcRIOLock
                        object: nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(setPointChanged:)
                         name : ORHVcRIOModelSetPointChanged
                        object: model];
 
    [notifyCenter addObserver : self
                     selector : @selector(setPointFileChanged:)
                         name : ORHVcRIOModelSetPointFileChanged
                        object: model];

    [notifyCenter addObserver : self
                     selector : @selector(measuredValuesChanged:)
                         name : ORHVcRIOModelMeasuredValuesChanged
                        object: model];

    [notifyCenter addObserver : self
                     selector : @selector(setPointsReadBackChanged:)
                         name : ORHVcRIOModelReadBackChanged
						object: model];
    
    [notifyCenter addObserver : self
                     selector : @selector(queCountChanged:)
                         name : ORHVcRIOModelQueCountChanged
                       object : model];
    
    [notifyCenter addObserver : self
                     selector : @selector(verboseChanged:)
                         name : ORHVcRIOModelVerboseChanged
                       object : model];
    
    [notifyCenter addObserver : self
                     selector : @selector(showFormattedDatesChanged:)
                         name : ORHVcRIOModelShowFormattedDatesChanged
                       object : model];
    
    [notifyCenter addObserver : self
                     selector : @selector(postRegulationPointAdded:)
                         name : ORHVcRIOModelPostRegulationPointAdded
                       object : model];
    
    [notifyCenter addObserver : self
                     selector : @selector(postRegulationPointRemoved:)
                         name : ORHVcRIOModelPostRegulationPointRemoved
                       object : model];
    
    [notifyCenter addObserver : self
                     selector : @selector(updatePostRegulationTable)
                         name : ORHVcRIOModelUpdatePostRegulationTable
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(postRegulationFileChanged:)
                         name : ORHVcRIOModelPostRegulationFileChanged
                       object : nil];

    [notifyCenter addObserver : self
                     selector : @selector(pollTimeChanged:)
                         name : ORHVcRIOModelPollTimeChanged
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(mainSpecRamping:)
                         name : ORHVcRIOModelMainSpecRamping
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(mainSpecPostRegRamping:)
                         name : ORHVcRIOModelMainSpecPostRegRamping
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(mainSpecPostRegAPRRamping:)
                         name : ORHVcRIOModelMainSpecPostRegAPRRamping
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(mainSpecRampSuccess:)
                         name : ORHVcRIOModelMainSpecRampSuccess
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(mainSpecRampFailure:)
                         name : ORHVcRIOModelMainSpecRampFailure
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(estimatingScaleFactor:)
                         name : ORHVcRIOModelEstimatingScaleFactor
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(postRegPrecisionChanged:)
                         name : ORHVcRIOModelPostRegPrecisionChanged
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(postRegEnabledChanged:)
                         name : ORHVcRIOModelPostRegEnabledChanged
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(postRegAPREnabledChanged:)
                         name : ORHVcRIOModelPostRegAPREnabledChanged
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(postRegAPRPrecisionChanged:)
                         name : ORHVcRIOModelPostRegAPRPrecisionChanged
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(postRegAPRTimeoutChanged:)
                         name : ORHVcRIOModelPostRegAPRTimeoutChanged
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(postRegConfigChanged:)
                         name : ORHVcRIOModelPostRegConfigChanged
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(postRegDefSFChanged:)
                         name : ORHVcRIOModelPostRegDefSFChanged
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(ieSAPModeChanged:)
                         name : ORHVcRIOModelIESAPModeChanged
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(vmScaleFactorChanged:)
                         name : ORHVcRIOModelVMScaleFactorChanged
                       object : nil];
}

- (void) setModel:(id)aModel
{
    [aModel init];
	[super setModel:aModel];
    [[self window] setTitle:[NSString stringWithFormat:@"HV-cRIO Control (Unit %u)",[model uniqueIdNumber]]];
}

- (void) updateWindow
{
    [super updateWindow];
    [self lockChanged:nil];
    [self cancelMainSpecOffAction:nil];
    [self cancelPostRegOffAction:nil];
    [self cancelPreSpecOffAction:nil];
    [self setPointChanged:nil];
    [self setPointFileChanged:nil];
    
    [self measuredValuesChanged:nil];
	[self setPointsReadBackChanged:nil];
	[self queCountChanged:nil];
    
    [self ipAddressChanged:nil];
    [self verboseChanged:nil];
	[self isConnectedChanged:nil];
    [self showFormattedDatesChanged:nil];
    [self postRegulationFileChanged:nil];
    [self pollTimeChanged:nil];
    [self postRegPrecisionChanged:nil];
    [self postRegEnabledChanged:nil];
    [self postRegAPREnabledChanged:nil];
    [self postRegAPRPrecisionChanged:nil];
    [self postRegAPRTimeoutChanged:nil];
    [self postRegDefSFChanged:nil];
    [self postRegConfigChanged:nil];
    [self ieSAPModeChanged:nil];
    [self vmScaleFactorChanged:nil];
}

- (void) pollTimeChanged:(NSNotification*)aNote
{
    [pollTimePU selectItemWithTag:[model pollTime]];
    if([model pollTime]){
        [progressWheel startAnimation:nil];
        [progressWheel setHidden:NO];
    }
    else{
        [progressWheel stopAnimation:nil];
        [progressWheel setHidden:YES];
    }
    [pollTimeTextField setStringValue:[pollTimePU title]];
    if(![model pollTime]){
        [mainSpecStatusTextField setStringValue:@"Unknown"];
        [mainSpecStatusTextField setTextColor:[NSColor blackColor]];
    }
}

- (void) postRegulationFileChanged:(NSNotification*)aNote
{
    [postRegulationFileField setStringValue:[[model postRegulationFile] stringByAbbreviatingWithTildeInPath] ];
}
- (void) postRegulationPointAdded:(NSNotification*)aNote
{
    [postRegulationTableView reloadData];
    NSIndexSet* indexSet = [NSIndexSet indexSetWithIndex:[model numPostRegulationPoints]];
    [postRegulationTableView selectRowIndexes:indexSet byExtendingSelection:NO];
    [self setButtonStates];
}

- (void) postRegulationPointRemoved:(NSNotification*)aNote
{
    int index = [[[aNote userInfo] objectForKey:@"Index"] intValue];
    index = MIN(index,(int)[model numPostRegulationPoints]-1);
    index = MAX(index,0);
    [postRegulationTableView reloadData];
    NSIndexSet* indexSet = [NSIndexSet indexSetWithIndex:index];
    [postRegulationTableView selectRowIndexes:indexSet byExtendingSelection:NO];
    [self setButtonStates];
}

- (void) updatePostRegulationTable
{
    [postRegulationTableView reloadData];
}

- (void) isConnectedChanged:(NSNotification*)aNote
{
	[ipConnectedTextField setStringValue: [model isConnected]?@"Connected":@"Not Connected"];
    [ipConnectButton setTitle:[model isConnected]?@"Disconnect":@"Connect"];
}

- (void) showFormattedDatesChanged:(NSNotification*)aNote
{
    [showFormattedDatesCB setIntValue: [model showFormattedDates]];
    [setPointTableView reloadData];
    [measuredValueTableView reloadData];

}
- (void) verboseChanged:(NSNotification*)aNote
{
    [verboseCB setIntValue: [model verbose]];
}
- (void) ipAddressChanged:(NSNotification*)aNote
{
	[ipAddressTextField setStringValue: [model ipAddress]];
	[[self window] setTitle:[model title]];
}

- (void) queCountChanged:(NSNotification*)aNotification
{
	[cmdQueCountField setIntegerValue:[model queCount]];
    [queueValueBar setNeedsDisplay:YES];
}

- (void) setPointChanged:(NSNotification*)aNote
{
	[setPointTableView reloadData];
    [self checkButtonStatus];
}

- (void) setPointFileChanged:(NSNotification*)aNote
{
    [setPointFileField setStringValue:[model setPointFile]];
}

- (void) measuredValuesChanged:(NSNotification*)aNote
{
    [measuredValueTableView reloadData];
    
    [expertPCControlOnlyField setStringValue:[model expertPCControlOnly] ? @"Only Expert PC Can Set Values":@""];
    [zeusHasControlField setStringValue:     [model zeusHasControl]      ? @"ZEUS has control":@""];
    [orcaHasControlField setStringValue:     [model orcaHasControl]      ? @"ORCA has control":@""];

    [retardingPotentialTextField setStringValue:[NSString stringWithFormat:@"%.2f",[model readK35Voltage]]];
    double vesselVoltage = -1 * [model readMainSpecVesselVoltage];
    double ieCommonVoltage = -1 * [model readIeCommonVoltage];
    double offset = [model readPostRegSetVoltage];
    offset *= [model getPostRegulationScaleFactor:vesselVoltage];
    [mainSpecVoltageTextField setStringValue:[NSString stringWithFormat:@"%f",vesselVoltage]];
    [mainSpecPostRegVoltageTextField setStringValue:[NSString stringWithFormat:@"%f",vesselVoltage+offset]];
    [ieCommonTextField        setStringValue:[NSString stringWithFormat:@"%f",-1*[model readIeCommonVoltage]]];
    [westConeTextField        setStringValue:[NSString stringWithFormat:@"%f",ieCommonVoltage]];
    [eastConeTextField        setStringValue:[NSString stringWithFormat:@"%f",-1*[model readSteepConesEastVoltage]]];
    [preSpecVoltageTextField  setStringValue:[NSString stringWithFormat:@"%f",-1*[model readPreSpecVesselVoltage]]];
    [southConeTextField       setStringValue:[NSString stringWithFormat:@"%f",-1*[model readPreSpecSouthConeVoltage]]];
    [northConeTextField       setStringValue:[NSString stringWithFormat:@"%f",-1*[model readPreSpecNorthConeVoltage]]];
    [wireElectrodeTextField   setStringValue:[NSString stringWithFormat:@"%f",-1*[model  readPreSpecWireElectrodeVoltage]]];
    
    if([model readPostRegSetVoltage] == 4.9){
        [postRegTextField setStringValue:@"OFF"];
        [postRegTextField setTextColor:[NSColor redColor]];
    }
    else{
        [postRegTextField setStringValue:@"ON"];
        [postRegTextField setTextColor:[NSColor greenColor]];
    }
}

- (void) setPointsReadBackChanged:(NSNotification*)aNote
{
	[setPointTableView reloadData];
}

- (void) mainSpecRamping:(NSNotification*)aNote
{
    [mainSpecStatusTextField setStringValue:@"Ramping"];
    [mainSpecStatusTextField setTextColor:[NSColor orangeColor]];
}

- (void) mainSpecPostRegRamping:(NSNotification*)aNote
{
    [mainSpecStatusTextField setStringValue:@"Post-Regulation Adjustment"];
    [mainSpecStatusTextField setTextColor:[NSColor orangeColor]];
}

- (void) mainSpecPostRegAPRRamping:(NSNotification*)aNote
{
    [mainSpecStatusTextField setStringValue:@"APR Fine Tuning"];
    [mainSpecStatusTextField setTextColor:[NSColor orangeColor]];
}

- (void) mainSpecRampSuccess:(NSNotification*)aNote
{
    [mainSpecStatusTextField setStringValue:@"At Set Point"];
    [mainSpecStatusTextField setTextColor:[NSColor greenColor]];
}

- (void) mainSpecRampFailure:(NSNotification*)aNote
{
    [mainSpecStatusTextField setStringValue:@"Ramp Failed"];
    [mainSpecStatusTextField setTextColor:[NSColor redColor]];
}

- (void) estimatingScaleFactor:(NSNotification*)aNote
{
    [mainSpecStatusTextField setStringValue:@"Estimating Scale Factor"];
    [mainSpecStatusTextField setTextColor:[NSColor orangeColor]];
}

- (void) postRegPrecisionChanged:(NSNotification*)aNote
{
    [postRegPrecisionTextField setStringValue:[NSString stringWithFormat:@"%.2f", [model postRegPrecision]]];
}

- (void) postRegEnabledChanged:(NSNotification*)aNote
{
    [enablePostRegButton setState:[model postRegEnabled]];
}

- (void) postRegAPREnabledChanged:(NSNotification*)aNote
{
    [enablePostRegAPRButton setState:[model postRegAPREnabled]];
}

- (void) postRegAPRPrecisionChanged:(NSNotification*)aNote
{
    [postRegAPRPrecisionTextField setStringValue:[NSString stringWithFormat:@"%.3f", [model postRegAPRPrecision]]];
}

- (void) postRegAPRTimeoutChanged:(NSNotification*)aNote
{
    [postRegAPRTimeoutTextField setStringValue:[NSString stringWithFormat:@"%.1f", [model postRegAPRTimeout]]];
}

- (void) postRegDefSFChanged:(NSNotification *)aNote
{
    [postRegDefSFTextField setStringValue:[NSString stringWithFormat:@"%.2f", [model postRegDefSF]]];
}

- (void) postRegConfigChanged:(NSNotification*)aNote
{
    [postRegConfigPU setIntValue:[model postRegConfig]];
}

- (void) vmScaleFactorChanged:(NSNotification*)aNote
{
    [vmScaleFactorTextField setStringValue:[NSString stringWithFormat:@"%.3f", [model vmScaleFactor]]];
}

- (void) ieSAPModeChanged:(NSNotification*)aNote
{
    [sapModeButton setState:[model ieSAPmode]];
}

- (void) checkGlobalSecurity
{
    BOOL secure = [[[NSUserDefaults standardUserDefaults] objectForKey:OROrcaSecurityEnabled] boolValue];
    [gSecurity setLock:ORHVcRIOLock to:secure];
    [lockButton setEnabled:secure];
}

- (void) lockChanged:(NSNotification*)aNotification
{
    BOOL locked = [gSecurity isLocked:ORHVcRIOLock];
    [lockButton setState: locked];
    [self setButtonStates];
}

#pragma mark ***Actions
- (IBAction) writeSetpointsAction:(id)sender
{
    [model writeSetpoints];
    [self lockChanged:nil];
}

- (IBAction) readBackSetpointsAction:(id)sender
{
    [model readBackSetpoints];
    [self lockChanged:nil];
}

- (IBAction) readMeasuredValuesAction:(id)sender
{
    [model readMeasuredValues];
    [self lockChanged:nil];
}

- (IBAction) lockAction:(id) sender
{
    [gSecurity tryToSetLock:ORHVcRIOLock to:[sender intValue] forWindow:[self window]];
}

- (void) ipAddressFieldAction:(id)sender
{
	[model setIpAddress:[sender stringValue]];
}

- (IBAction) connectAction: (id) aSender
{
    [self endEditing];
    [model connect];
}

- (IBAction) addPostRegulationPoint: (id) aSender
{
    [model addPostRegulationPoint];
}

- (IBAction) removePostRegulationPoint: (id) aSender
{
    NSIndexSet* theSet = [postRegulationTableView selectedRowIndexes];
    NSUInteger current_index = [theSet firstIndex];
    if(current_index != NSNotFound){
        [model removePostRegulationPointAtIndex:(int)current_index];
    }
    [self setButtonStates];
}

- (void) setButtonStates
{
    BOOL locked = [gSecurity isLocked:ORHVcRIOLock];
    [readPostRegulationButton           setEnabled:!locked];
    [addPostRegulationPointButton       setEnabled:!locked];
    [removePostRegulationPointButton    setEnabled:!locked];
    [readSetPointFileButton             setEnabled:!locked];
    [writeAllSetPointsButton            setEnabled:!locked];
    [setPointTableView                  setEnabled:!locked];
    [setMainSpecVoltageTextField        setEnabled:!locked];
    [setIeCommonTextField               setEnabled:!locked];
    [setEwSteepConeTextField            setEnabled:!locked];
    [setPreSpecVoltageTextField         setEnabled:!locked];
    [setSouthConeTextField              setEnabled:!locked];
    [setNorthConeTextField              setEnabled:!locked];
    [setWireElectrodeTextField          setEnabled:!locked];
    [setMainSpecVoltageButton           setEnabled:!locked];
    [setIECommonButton                  setEnabled:!locked];
    [setEWSteepConesButton              setEnabled:!locked];
    [setPreSpecVoltageButton            setEnabled:!locked];
    [setSouthConeButton                 setEnabled:!locked];
    [setNorthConeButton                 setEnabled:!locked];
    [setWireElectrodeButton             setEnabled:!locked];
    [enablePostRegButton                setEnabled:!locked];
    [enablePostRegAPRButton             setEnabled:!locked];
    [mainSpecOffButton                  setEnabled:!locked];
    [postRegOffButton                   setEnabled:!locked];
    [preSpecOffButton                   setEnabled:!locked];
    [postRegPrecisionTextField          setEnabled:!locked];
    [postRegAPRPrecisionTextField       setEnabled:!locked];
    [postRegAPRTimeoutTextField         setEnabled:!locked];
    [postRegDefSFTextField              setEnabled:!locked];
    [sapModeButton                      setEnabled:!locked];
    [vmScaleFactorTextField             setEnabled:!locked];
    [currentSetPointButton              setEnabled:!locked];
}

- (double) checkTFVoltage:(id)sender withMin:(double)minV andMax:(double)maxV
{
    NSString* sv = [[sender stringValue] stringByReplacingOccurrencesOfString:@"," withString:@""];
    double v = [self checkVoltage:[sv doubleValue] withMin:minV andMax:maxV];
    [sender setStringValue:[NSString stringWithFormat:@"%f", v]];
    return v;
}

- (double) checkVoltage:(double)voltage withMin:(double)minV andMax:(double)maxV
{
    return MAX(MIN(ABS(voltage), maxV), minV);
}

- (void) changeButton:(NSButton*)button withColor:(NSColor*)color
{
    NSDictionary* attr = [NSDictionary dictionaryWithObjectsAndKeys:color, NSForegroundColorAttributeName, nil];
    NSAttributedString* str = [[NSAttributedString alloc] initWithString:[button title] attributes:attr];
    [button setAttributedTitle:str];
    [str release];
}

- (BOOL) checkButtonStatus:(NSButton*)button fromTextField:(NSTextField*)text
                withString:(NSString*)str withMin:(double)minv andMax:(double)maxv
{
    double setPoint = [[model setPointAtIndex:[model spIndex:str]] doubleValue];
    double value = [self checkVoltage:[text doubleValue] withMin:minv andMax:maxv];
    if(value != [[text stringValue] doubleValue]) [text setStringValue:[NSString stringWithFormat:@"%f",value]];
    if(setPoint != value){
        [self changeButton:button withColor:[NSColor orangeColor]];
        return false;
    }
    else{
        [self changeButton:button withColor:[NSColor labelColor]];
        return true;
    }
}

- (BOOL) checkButtonStatus:(NSButton*)button fromTextField:(NSTextField*)text withString:(NSString*)str
{
    double setPoint = [[model setPointAtIndex:[model spIndex:str]] doubleValue];
    if([str isEqualToString:@"mainSpecSupplyVoltage"]){
        if([model postRegEnabled])
            setPoint += [model readPostRegSetVoltage] * [model getPostRegulationScaleFactor:setPoint];
    }
    double value = [text doubleValue];
    if(setPoint != value){
        [self changeButton:button withColor:[NSColor orangeColor]];
        return false;
    }
    else{
        [self changeButton:button withColor:[NSColor labelColor]];
        return true;
    }
}

- (void) checkButtonStatus
{
    [self checkButtonStatus:setMainSpecVoltageButton  fromTextField:setMainSpecVoltageTextField withString:@"mainSpecSupplyVoltage"];
    [self checkButtonStatus:setIECommonButton         fromTextField:setIeCommonTextField        withString:@"ieCommonVoltage"];
    [self checkButtonStatus:setPreSpecVoltageButton   fromTextField:setPreSpecVoltageTextField  withString:@"preSpecVoltage"];
    [self checkButtonStatus:setSouthConeButton        fromTextField:setSouthConeTextField       withString:@"preSpecSouthConeVoltage"];
    [self checkButtonStatus:setNorthConeButton        fromTextField:setNorthConeTextField       withString:@"preSpecNorthConeVoltage"];
    [self checkButtonStatus:setWireElectrodeButton    fromTextField:setWireElectrodeTextField   withString:@"preSpecWireElectrodeVoltage"];
    if(![self checkButtonStatus:setEWSteepConesButton fromTextField:setEwSteepConeTextField     withString:@"innerElectrodeWest"] ||
       ![self checkButtonStatus:setEWSteepConesButton fromTextField:setEwSteepConeTextField     withString:@"innerElectrodeEast"])
        [self changeButton:setEWSteepConesButton withColor:[NSColor orangeColor]];
}

- (IBAction) setMainSpecVoltageTextAction:(id)sender
{
    [self checkButtonStatus:setMainSpecVoltageButton fromTextField:sender
                 withString:@"mainSpecSupplyVoltage" withMin:0.0 andMax:kHVcRIOMainSpecMaxVoltage];
    double v = [[sender stringValue] doubleValue];
    double sf = [model getPostRegulationScaleFactor:v];
    v += [[setIeCommonTextField stringValue] doubleValue] + [model readPostRegSetVoltage] * sf;
    [targetPotentialTextField setStringValue:[NSString stringWithFormat:@"%.2f V", v]];
}

- (IBAction) setIeCommonTextAction:(id)sender
{
    [self checkButtonStatus:setIECommonButton fromTextField:sender
                 withString:@"ieCommonVoltage" withMin:0.0 andMax:kHVcRIOIECommonMaxVoltage];
    double v = [[setMainSpecVoltageTextField stringValue] doubleValue];
    double sf = [model getPostRegulationScaleFactor:v];
    v += [[sender stringValue] doubleValue] + [model readPostRegSetVoltage] * sf;
    [targetPotentialTextField setStringValue:[NSString stringWithFormat:@"%.2f V", v]];
}

- (IBAction) setEwSteepConeTextAction:(id)sender
{
    if(![self checkButtonStatus:setEWSteepConesButton fromTextField:sender
                     withString:@"innerElectrodeWest" withMin:0.0 andMax:kHVcRIOSteepConeMaxVoltage] ||
       ![self checkButtonStatus:setEWSteepConesButton fromTextField:sender
                      withString:@"innerElectrodeEast" withMin:0.0 andMax:kHVcRIOSteepConeMaxVoltage])
        [self changeButton:setEWSteepConesButton withColor:[NSColor orangeColor]];
}

- (IBAction) setPreSpecVoltageTextAction:(id)sender
{
    [self checkButtonStatus:setPreSpecVoltageButton fromTextField:sender
                 withString:@"preSpecVoltage" withMin:0.0 andMax:kHVcRIOPreSpecMaxVoltage];
}

- (IBAction) setSouthConeTextAction:(id)sender
{
    [self checkButtonStatus:setSouthConeButton fromTextField:sender
                 withString:@"preSpecSouthConeVoltage" withMin:0.0 andMax:kHVcRIOIECommonMaxVoltage];
}

- (IBAction) setNorthConeTextAction:(id)sender
{
    [self checkButtonStatus:setNorthConeButton fromTextField:sender
                 withString:@"preSpecNorthConeVoltage" withMin:0.0 andMax:kHVcRIOIECommonMaxVoltage];
}

- (IBAction) setWireElectrodeTextAction:(id)sender
{
    [self checkButtonStatus:setWireElectrodeButton fromTextField:sender
                 withString:@"preSpecWireElectrodeVoltage" withMin:0.0 andMax:kHVcRIOIECommonMaxVoltage];
}

- (IBAction) setMainSpecVoltageAction:(id)sender
{
    [[setMainSpecVoltageTextField window] makeFirstResponder:nil];
    double voltage = [self checkTFVoltage:setMainSpecVoltageTextField withMin:0.0 andMax:kHVcRIOMainSpecMaxVoltage];
    if([model postRegEnabled]){
        if(voltage < 5000.0){
            [self endEditing];
            [[self window] beginSheet:confirmPostRegVoltagePanel completionHandler:nil];
        }
        else [model setVesselVoltageWithPostReg:voltage
                                      precision:[model postRegPrecision]
                                         config:[model postRegConfig]];
    }
    else [model setVesselVoltageWithoutPostReg:voltage];
}

- (IBAction) setIECommonAction:(id)sender
{
    [[setIeCommonTextField window] makeFirstResponder:nil];
    double voltage = [self checkTFVoltage:setIeCommonTextField withMin:0.0 andMax:kHVcRIOIECommonMaxVoltage];
    [model setIeCommonVoltage:voltage];
}

- (IBAction) setEWSteepConesAction:(id)sender
{
    [[setEwSteepConeTextField window] makeFirstResponder:nil];
    double voltage = [self checkTFVoltage:setEwSteepConeTextField withMin:0.0 andMax:kHVcRIOSteepConeMaxVoltage];
    [model setSteepConesVoltage:voltage];
}

- (IBAction) setPreSpecVoltageAction:(id)sender
{
    [[setPreSpecVoltageTextField window] makeFirstResponder:nil];
    double voltage = [self checkTFVoltage:setPreSpecVoltageTextField withMin:0.0 andMax:kHVcRIOPreSpecMaxVoltage];
    [model setPreSpecVesselVoltage:voltage];
}

- (IBAction) setSouthConeAction:(id)sender
{
    [[setSouthConeTextField window] makeFirstResponder:nil];
    double voltage = [self checkTFVoltage:setSouthConeTextField withMin:0.0 andMax:kHVcRIOIECommonMaxVoltage];
    [model setPreSpecSouthConeVoltage:voltage];
}

- (IBAction) setNorthConeAction:(id)sender
{
    [[setNorthConeTextField window] makeFirstResponder:nil];
    double voltage = [self checkTFVoltage:setNorthConeTextField withMin:0.0 andMax:kHVcRIOIECommonMaxVoltage];
    [model setPreSpecNorthConeVoltage:voltage];
}

- (IBAction) setWireElectrodeAction:(id)sender
{
    [[setWireElectrodeTextField window] makeFirstResponder:nil];
    double voltage = [self checkTFVoltage:setWireElectrodeTextField withMin:0.0 andMax:kHVcRIOIECommonMaxVoltage];
    [model setPreSpecWireElectrodeVoltage:voltage];
}

- (IBAction) mainSpecStopRampAction:(id)sender
{
    [model setBreakRampLoops:[NSNumber numberWithBool:YES]];
}

- (IBAction) mainSpecOffAction:(id)sender
{
    [self endEditing];
    [[self window] beginSheet:confirmMainSpecOffPanel completionHandler:nil];
}

- (IBAction) confirmMainSpecOffAction:(id)sender
{
    [model turnOffHV];
    [confirmMainSpecOffPanel orderOut:nil];
    [NSApp endSheet:confirmMainSpecOffPanel];
}

- (IBAction) cancelMainSpecOffAction:(id)sender
{
    [confirmMainSpecOffPanel orderOut:nil];
    [NSApp endSheet:confirmMainSpecOffPanel];
}

- (IBAction) postRegOffAction:(id)sender
{
    [self endEditing];
    [[self window] beginSheet:confirmPostRegOffPanel completionHandler:nil];
}

- (IBAction) confirmPostRegOffAction:(id)sender
{
    [model turnOffPostReg];
    [enablePostRegButton setState:NO];
    [confirmPostRegOffPanel orderOut:nil];
    [NSApp endSheet:confirmPostRegOffPanel];
}

- (IBAction) cancelPostRegOffAction:(id)sender
{
    [confirmPostRegOffPanel orderOut:nil];
    [NSApp endSheet:confirmPostRegOffPanel];
}

- (IBAction) preSpecOffAction:(id)sender
{
    [self endEditing];
    [[self window] beginSheet:confirmPreSpecOffPanel completionHandler:nil];
}

- (IBAction) confirmPreSpecOffAction:(id)sender
{
    [model turnOffPreSpec];
    [confirmPreSpecOffPanel orderOut:nil];
    [NSApp endSheet:confirmPreSpecOffPanel];
}

- (IBAction) cancelPreSpecOffAction:(id)sender
{
    [confirmPreSpecOffPanel orderOut:nil];
    [NSApp endSheet:confirmPreSpecOffPanel];
}

- (IBAction) confirmPostRegVoltageAction:(id)sender
{
    [model setVesselVoltageWithPostReg:[[setMainSpecVoltageTextField stringValue] doubleValue]
                             precision:[model postRegPrecision]
                                config:[model postRegConfig]];
    [confirmPostRegVoltagePanel orderOut:nil];
    [NSApp endSheet:confirmPostRegVoltagePanel];
}

- (IBAction) cancelPostRegVoltageAction:(id)sender
{
    [confirmPostRegVoltagePanel orderOut:nil];
    [NSApp endSheet:confirmPostRegVoltagePanel];
}

- (NSMutableDictionary*) getSAPModeStatus
{
    // get set points and measured values to actually check status
    NSMutableDictionary* dict = [NSMutableDictionary dictionary];
    [dict setValue:@"OK" forKey:@"eastStatus"];
    [dict setValue:@"OK" forKey:@"westStatus"];
    NSMutableString* s = [NSMutableString string];
    int voltages[6] = {125, 25, 10, 2, 45, 105};
    for(int i=10; i<15; i++){
        [s appendFormat:@"Index %d: Set Point: %d V Measured: %.1f V", i, voltages[i-10], 0.0];
        if(i < 14) [s appendString:@"\n"];
    }
    [dict setValue:s forKey:@"statusString"];
    return dict;
}

- (IBAction) confirmSAPModeAction:(id)sender
{
    NSMutableDictionary* dict = [self getSAPModeStatus];
    [eastConeTextField setToolTip:[dict objectForKey:@"statusString"]];
    [westConeTextField setToolTip:[dict objectForKey:@"statusString"]];
    [setEwSteepConeTextField setStringValue:@""];
    [setEwSteepConeTextField setEnabled:NO];
    [eastConeTextField setStringValue:[dict objectForKey:@"eastStatus"]];
    [westConeTextField setStringValue:[dict objectForKey:@"westStatus"]];
    [eastConeTextField setTextColor:[NSColor greenColor]];
    [westConeTextField setTextColor:[NSColor greenColor]];
    [confirmSAPModePanel orderOut:nil];
    [NSApp endSheet:confirmSAPModePanel];
}

- (IBAction) cancelSAPModeAction:(id)sender
{
    [sapModeButton setState:![sapModeButton state]];
    [confirmSAPModePanel orderOut:nil];
    [NSApp endSheet:confirmSAPModePanel];
}

- (IBAction) sapModeAction:(id)sender
{
    if([sender state]){
        [self endEditing];
        [[self window] beginSheet:confirmSAPModePanel completionHandler:nil];
    }
    else{
        [eastConeTextField setToolTip:@""];
        [westConeTextField setToolTip:@""];
        [setEwSteepConeTextField setEnabled:YES];
        [eastConeTextField setTextColor:[NSColor textColor]];
        [westConeTextField setTextColor:[NSColor textColor]];
        [eastConeTextField setStringValue:[NSString stringWithFormat:@"%f",
                                           [model readSteepConesEastVoltage]]];
        [westConeTextField setStringValue:[NSString stringWithFormat:@"%f",
                                           [model readSteepConesWestVoltage]]];
    }
}

- (IBAction) postRegConfigAction:(id)sender
{
    [model setPostRegConfig:(int)[sender tag]];
}

- (IBAction) postRegPrecisionAction:(id)sender
{
    [model setPostRegPrecision:[[sender stringValue] doubleValue]];
}

- (IBAction) postRegEnabledAction:(id)sender
{
    [model setPostRegEnabled:[[sender stringValue] boolValue]];
}

- (IBAction) postRegAPREnabledAction:(id)sender
{
    [model setPostRegAPREnabled:[[sender stringValue] boolValue]];
}

- (IBAction) postRegAPRPrecisionAction:(id)sender
{
    [model setPostRegAPRPrecision:[[sender stringValue] doubleValue]];
}

- (IBAction) postRegAPRTimeoutAction:(id)sender
{
    [model setPostRegAPRTimeout:[[sender stringValue] doubleValue]];
}

- (IBAction) postRegDefSFAction:(id)sender
{
    [model setPostRegDefSF:[[sender stringValue] doubleValue]];
}

- (IBAction) vmScaleFactorAction:(id)sender
{
    [model setVMScaleFactor:[[sender stringValue] doubleValue]];
}

- (void) currentSetPoints
{
    [setMainSpecVoltageTextField setStringValue:[model setPointAtIndex:[model spIndex:@"mainSpecSupplyVoltage"]]];
    [setIeCommonTextField        setStringValue:[model setPointAtIndex:[model spIndex:@"ieCommonVoltage"]]];
    [setEwSteepConeTextField     setStringValue:[model setPointAtIndex:[model spIndex:@"innerElectrodeWest"]]];
    [setPreSpecVoltageTextField  setStringValue:[model setPointAtIndex:[model spIndex:@"preSpecVoltage"]]];
    [setSouthConeTextField       setStringValue:[model setPointAtIndex:[model spIndex:@"preSpecSouthConeVoltage"]]];
    [setNorthConeTextField       setStringValue:[model setPointAtIndex:[model spIndex:@"preSpecNorthConeVoltage"]]];
    [setWireElectrodeTextField   setStringValue:[model setPointAtIndex:[model spIndex:@"preSpecWireElectrodeVoltage"]]];
    [self checkButtonStatus];
}

- (IBAction) currentSetPointAction:(id)sender
{
    [self currentSetPoints];
}

#pragma mark ***Table Data Source
- (id) tableView:(NSTableView *) aTableView objectValueForTableColumn:(NSTableColumn *) aTableColumn row:(NSInteger) rowIndex
{
    if(setPointTableView == aTableView){
        if([[aTableColumn identifier] isEqualToString:@"index"]){
            return  [NSNumber numberWithInteger:rowIndex];
        }
        else {
            if([model showFormattedDates] &&
               ([[aTableColumn identifier] isEqualToString:@"readBack"] && [[model setPointItem:(int)rowIndex forKey:@"item"] isEqualToString:@"Zeitstempel"])){
                
                NSTimeInterval s = [[model setPointItem:(int)rowIndex forKey:@"readBack"]doubleValue] - kSecsBetween1904and1070;
                if(s<1)return @"?";
                NSDate* theDate = [NSDate dateWithTimeIntervalSince1970:s];
                NSDateFormatter* dateFormat = [[[NSDateFormatter alloc] init] autorelease];
                [dateFormat setDateFormat:@"dd/MM HH:mm:ss"];
                
                return [dateFormat stringFromDate:theDate];
            }
            else return [model setPointItem:(int)rowIndex forKey:[aTableColumn identifier]];
        }
    }
    else if(measuredValueTableView == aTableView){

        if([[aTableColumn identifier] isEqualToString:@"index"]){
            return  [NSNumber numberWithInt:(int)rowIndex];
        }
        else {
            if([model showFormattedDates] &&
               ([[aTableColumn identifier] isEqualToString:@"value"] && [[model measuredValueItem:(int)rowIndex forKey:@"item"] isEqualToString:@"Zeitstempel"]) ||
               ([[aTableColumn identifier] isEqualToString:@"value"] && [[model measuredValueItem:(int)rowIndex forKey:@"data"] isEqualToString:@"Zeitstempel"])){
                NSTimeInterval s = [[model measuredValueItem:(int)rowIndex forKey:@"value"]doubleValue] - kSecsBetween1904and1070;
                if(s<1)return @"?";

                NSDate* theDate = [NSDate dateWithTimeIntervalSince1970:s];
                NSDateFormatter* dateFormat = [[[NSDateFormatter alloc] init] autorelease];
                [dateFormat setDateFormat:@"dd/MM HH:mm:ss"];
                return [dateFormat stringFromDate:theDate];
            }

            else return [model measuredValueItem:(int)rowIndex forKey:[aTableColumn identifier]];
        }
    }
    else if(postRegulationTableView == aTableView){
        if([[aTableColumn identifier] isEqualToString:@"index"]){
            return  [NSNumber numberWithInt:(int)rowIndex];
        }
        else {
            return [[model postRegulationPointAtIndex:(int)rowIndex] objectForKey:[aTableColumn identifier]];
        }
    }
    else return nil;
}

// just returns the number of items we have.
- (NSInteger) numberOfRowsInTableView:(NSTableView *)aTableView
{
	if(setPointTableView == aTableView)return [model numSetPoints];
    else if(measuredValueTableView == aTableView)return [model numMeasuredValues];
    else if(postRegulationTableView == aTableView)return [model numPostRegulationPoints];
	else return 0;
}

- (void) tableView:(NSTableView *)aTableView setObjectValue:(id)anObject forTableColumn:(NSTableColumn *)aTableColumn row:(NSInteger)rowIndex
{
    if(anObject == nil)return;
    
    if(setPointTableView == aTableView){
        if([[aTableColumn identifier] isEqualToString:@"item"]) return;
        if([[aTableColumn identifier] isEqualToString:@"data"]) return;
        if([[aTableColumn identifier] isEqualToString:@"readback"]) return;
        if([[aTableColumn identifier] isEqualToString:@"setPoint"]){
            [model setSetPoint:(int)rowIndex  withValue:[anObject floatValue]];
            return;
        }
    }
    else if(postRegulationTableView == aTableView){
        id aPoint = [model postRegulationPointAtIndex:(int)rowIndex];
        [aPoint setValue:anObject forKey:[aTableColumn identifier]];
    }
}


- (IBAction) readSetPointFile:(id)sender
{
    NSOpenPanel *openPanel = [NSOpenPanel openPanel];
    [openPanel setCanChooseDirectories:NO];
    [openPanel setCanChooseFiles:YES];
    [openPanel setAllowsMultipleSelection:NO];
    [openPanel setPrompt:@"Choose"];
    NSString* startingDir;
	NSString* fullPath = [[model setPointFile] stringByExpandingTildeInPath];
    if(fullPath){
        startingDir = [fullPath stringByDeletingLastPathComponent];
    }
    else {
        startingDir = NSHomeDirectory();
    }
    
    [openPanel setDirectoryURL:[NSURL fileURLWithPath:startingDir]];
    [openPanel beginSheetModalForWindow:[self window] completionHandler:^(NSInteger result){
        if (result == NSFileHandlingPanelOKButton){
            [model readSetPointsFile:[[openPanel URL] path]];
        }
    }];
}

- (IBAction) flushQueueAction: (id) sender
{
    [model flushQueue];
}
- (IBAction) verboseAction: (id) sender
{
    [model setVerbose:[sender intValue]];
}

- (IBAction) showFormatedDatedAction: (id) sender
{
    [model setShowFormattedDates:[sender intValue]];
}

- (IBAction) saveSetPointFile:(id)sender
{
    NSSavePanel *savePanel = [NSSavePanel savePanel];
    [savePanel setPrompt:@"Save As"];
    [savePanel setCanCreateDirectories:YES];
    
    NSString* startingDir;
    NSString* defaultFile;
    
	NSString* fullPath = [[model setPointFile] stringByExpandingTildeInPath];
    if(fullPath){
        startingDir = [fullPath stringByDeletingLastPathComponent];
        defaultFile = [fullPath lastPathComponent];
    }
    else {
        startingDir = NSHomeDirectory();
        defaultFile = [model setPointFile];
        
    }
    [savePanel setDirectoryURL:[NSURL fileURLWithPath:startingDir]];
    [savePanel setNameFieldLabel:defaultFile];
    [savePanel beginSheetModalForWindow:[self window] completionHandler:^(NSInteger result){
        if (result == NSFileHandlingPanelOKButton){
            [model saveSetPointsFile:[[savePanel URL]path]];
        }
    }];
}
- (IBAction) pushReadBacksToSetPointsAction:(id)sender
{
    [model pushReadBacksToSetPoints];
}

- (IBAction) savePostRegulationScaleFactors: (id) aSender
{
    [self endEditing];
    NSSavePanel *savePanel = [NSSavePanel savePanel];
    [savePanel setPrompt:@"Save As"];
    [savePanel setCanCreateDirectories:YES];
    
    NSString* startingDir;
    NSString* defaultFile;
    
    NSString* fullPath = [[model postRegulationFile] stringByExpandingTildeInPath];
    if(fullPath){
        startingDir = [fullPath stringByDeletingLastPathComponent];
        defaultFile = [fullPath lastPathComponent];
    }
    else {
        startingDir = NSHomeDirectory();
        defaultFile = [model setPointFile];
        
    }
    [savePanel setDirectoryURL:[NSURL fileURLWithPath:startingDir]];
    [savePanel setNameFieldLabel:defaultFile];
    [savePanel beginSheetModalForWindow:[self window] completionHandler:^(NSInteger result){
        if (result == NSFileHandlingPanelOKButton){
            [model savePostRegulationFile:[[savePanel URL]path]];
        }
    }];
}
- (IBAction) readPostRegulationScaleFactors:(id)sender
{
    NSOpenPanel *openPanel = [NSOpenPanel openPanel];
    [openPanel setCanChooseDirectories:NO];
    [openPanel setCanChooseFiles:YES];
    [openPanel setAllowsMultipleSelection:NO];
    [openPanel setPrompt:@"Choose"];
    NSString* startingDir;
    NSString* fullPath = [[model postRegulationFile] stringByExpandingTildeInPath];
    if(fullPath){
        startingDir = [fullPath stringByDeletingLastPathComponent];
    }
    else {
        startingDir = NSHomeDirectory();
    }
    
    [openPanel setDirectoryURL:[NSURL fileURLWithPath:startingDir]];
    [openPanel beginSheetModalForWindow:[self window] completionHandler:^(NSInteger result){
        if (result == NSFileHandlingPanelOKButton){
            [model readPostRegulationFile:[[openPanel URL] path]];
        }
    }];
}
- (IBAction) pollTimeAction: (id) aSender
{
    [model setPollTime:(int)[[aSender selectedItem]tag]];
}

#pragma  mark ***Delegate Responsiblities
- (BOOL) tableView:(NSTableView *)tableView shouldSelectRow:(int)row
{
	return YES;
}
@end
