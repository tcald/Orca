//--------------------------------------------------------
// ORArduinoUNOController
// Created by Mark  A. Howe on Wed 10/17/2012
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2012 University of North Carolina. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of 
//North Carolina sponsored in part by the United States 
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020. 
//The University has certain rights in the program pursuant to 
//the contract and the program should not be copied or distributed 
//outside your organization.  The DOE and the University of 
//North Carolina reserve all rights in the program. Neither the authors,
//University of North Carolina, or U.S. Government make any warranty, 
//express or implied, or assume any liability or responsibility 
//for the use of this software.
//-------------------------------------------------------------
#pragma mark •••Imported Files

#import "ORArduinoUNOController.h"
#import "ORArduinoUNOModel.h"
#import "ORSerialPort.h"
#import "OHexFormatter.h"
#import "ORSerialPortController.h"

#define kDefaultSketchName @"DigitalReadSerial.ino"

@implementation ORArduinoUNOController

#pragma mark •••Initialization
- (id) init
{
	self = [super initWithWindowNibName:@"ArduinoUNO"];
	return self;
}

- (void) dealloc
{
    [[NSNotificationCenter defaultCenter] removeObserver:self];
	[super dealloc];
}

- (void) awakeFromNib
{	
	NSNumberFormatter* formatter = [[[NSNumberFormatter alloc] init] autorelease];
	[formatter setFormat:@"#0.000"];	
	int i;
	for(i=0;i<kNumArduinoUNOPins;i++){
		[[pinNameMatrix cellAtRow:i column:0] setTag:i];
		[[pinStateOutMatrix cellAtRow:i column:0] setTag:i];
		[[pinStateInMatrix cellAtRow:i column:0] setTag:i];		
		[[pwmMatrix cellAtRow:i column:0] setTag:i];
	}
	for(i=0;i<kNumArduinoUNOAdcChannels;i++){
		[[adcMatrix cellAtRow:i column:0] setTag:i];
		[[minValueMatrix cellAtRow:i column:0]	setTag:i];
		[[maxValueMatrix cellAtRow:i column:0]	setTag:i];
		[[slopeMatrix cellAtRow:i column:0]		setTag:i];
		[[interceptMatrix cellAtRow:i column:0] setTag:i];
		[[lowLimitMatrix cellAtRow:i column:0]	setTag:i];
		[[hiLimitMatrix cellAtRow:i column:0]	setTag:i];
		
		[[adcMatrix cellAtRow:i column:0] setFormatter:formatter];
		[[slopeMatrix cellAtRow:i column:0] setFormatter:formatter];
		[[interceptMatrix cellAtRow:i column:0] setFormatter:formatter];
		[[minValueMatrix cellAtRow:i column:0] setFormatter:formatter];
		[[maxValueMatrix cellAtRow:i column:0] setFormatter:formatter];
		[[lowLimitMatrix cellAtRow:i column:0] setFormatter:formatter];
		[[hiLimitMatrix cellAtRow:i column:0] setFormatter:formatter];
	}
	
	for(i=0;i<kNumArduinoUNOCustomChannels;i++){
		[[customValueMatrix cellAtRow:i column:0] setTag:i];
	}
	NSNumberFormatter* formatter2 = [[[NSNumberFormatter alloc] init] autorelease];
	[formatter2 setFormat:@"#0.00"];	
	[versionField setFormatter:formatter2];

	
	NSString* resourcePath = [[NSBundle mainBundle] resourcePath];
	NSString* fullPath = [resourcePath stringByAppendingPathComponent:kDefaultSketchName];
	if([[NSFileManager defaultManager] fileExistsAtPath:fullPath]){
		NSString* sketchString = [NSString stringWithContentsOfFile:fullPath encoding:NSASCIIStringEncoding error:nil];
		[sketchView setString:sketchString];
	}
	else {
		[sketchView setString:@"Default Sketch code is missing.... Check the ORCA help. It may exist there."];
	}
	
	
 	[super awakeFromNib];
}

#pragma mark •••Notifications

- (void) registerNotificationObservers
{
	NSNotificationCenter* notifyCenter = [NSNotificationCenter defaultCenter];
    [super registerNotificationObservers];
	
    [notifyCenter addObserver : self
                     selector : @selector(pollTimeChanged:)
                         name : ORArduinoUNOModelPollTimeChanged
                       object : nil];
	
    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORRunStatusChangedNotification
                       object : nil];
	
    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORArduinoUNOLock
                        object: nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORSerialPortModelPortStateChanged
						object: model];	

	[notifyCenter addObserver : self
                     selector : @selector(portStateChanged:)
                         name : ORSerialPortModelPortStateChanged
                       object : nil];
	
	[notifyCenter addObserver : self
                     selector : @selector(adcChanged:)
                         name : ORArduinoUNOModelAdcChanged
						object: model];	

	[notifyCenter addObserver : self
                     selector : @selector(customValueChanged:)
                         name : ORArduinoUNOModelCustomValueChanged
						object: model];	
	
	
	[notifyCenter addObserver : self
                     selector : @selector(pinNameChanged:)
                         name : ORArduinoUNOPinNameChanged
						object: model];	

	[notifyCenter addObserver : self
                     selector : @selector(pinStateInChanged:)
                         name : ORArduinoUNOPinStateInChanged
						object: model];	

	[notifyCenter addObserver : self
                     selector : @selector(pinTypeChanged:)
                         name : ORArduinoUNOPinTypeChanged
						object: model];	

	[notifyCenter addObserver : self
                     selector : @selector(pinStateOutChanged:)
                         name : ORArduinoUNOPinStateOutChanged
						object: model];	

	[notifyCenter addObserver : self
                     selector : @selector(pwmChanged:)
                         name : ORArduinoUNOPwmChanged
						object: model];	
	
	[notifyCenter addObserver : self
                     selector : @selector(slopeChanged:)
                         name : ORArduinoUNOSlopeChanged
						object: model];
	
    [notifyCenter addObserver : self
                     selector : @selector(interceptChanged:)
                         name : ORArduinoUNOInterceptChanged
						object: model];
	
	[notifyCenter addObserver : self
                     selector : @selector(minValueChanged:)
                         name : ORArduinoUNOMinValueChanged
						object: model];
	
    [notifyCenter addObserver : self
                     selector : @selector(maxValueChanged:)
                         name : ORArduinoUNOMaxValueChanged
						object: model];

	[notifyCenter addObserver : self
                     selector : @selector(lowLimitChanged:)
                         name : ORArduinoUNOLowLimitChanged
						object: model];
	
    [notifyCenter addObserver : self
                     selector : @selector(hiLimitChanged:)
                         name : ORArduinoUNOHiLimitChanged
						object: model];

	
    [notifyCenter addObserver : self
                     selector : @selector(versionChanged:)
                         name : ORArduinoUNOModelVersionChanged
						object: model];
	
	
	[serialPortController registerNotificationObservers];

}

- (void) setModel:(id)aModel
{
	[super setModel:aModel];
	[[self window] setTitle:[NSString stringWithFormat:@"ArduinoUNO (%u)",[model uniqueIdNumber]]];
}


- (void) updateWindow
{
    [super updateWindow];
    [self portStateChanged:nil];
	[self adcChanged:nil];
	[self customValueChanged:nil];
	[self pollTimeChanged:nil];
	
	[self pinStateInChanged:nil];
	[self pinStateOutChanged:nil];
	[self pinNameChanged:nil];
	[self pwmChanged:nil];
	[self pinTypeChanged:nil];

	[self lowLimitChanged:nil];
	[self hiLimitChanged:nil];
	[self minValueChanged:nil];
	[self maxValueChanged:nil];
	[self slopeChanged:nil];
	[self interceptChanged:nil];

	[self lockChanged:nil];
	[self versionChanged:nil];

    [self updateButtons];
	[serialPortController updateWindow];
}

- (void) versionChanged:(NSNotification*)aNote
{
	float theVersion = [model sketchVersion];
	[versionField setFloatValue:theVersion ];
}


- (void) checkGlobalSecurity
{
    BOOL secure = [[[NSUserDefaults standardUserDefaults] objectForKey:OROrcaSecurityEnabled] boolValue];
    [gSecurity setLock:ORArduinoUNOLock to:secure];
    [lockButton setEnabled:secure];
}

- (void) lockChanged:(NSNotification*)aNotification
{
	[self updateButtons];
}

- (BOOL) portLocked
{
	return [gSecurity isLocked:ORArduinoUNOLock];;
}

- (void) portStateChanged:(NSNotification*)aNotification
{
	if([[model serialPort] isOpen])	[portStatefield2 setStringValue:@"Open"];
	else [portStatefield2 setStringValue:@"Closed"];
}

- (void) updateButtons
{
    BOOL locked = [gSecurity isLocked:ORArduinoUNOLock];
	//BOOL portOpen = [[model serialPort] isOpen];
    [lockButton setState: locked];
	[serialPortController updateButtons:locked];
    [pollTimePopup	setEnabled:!locked];
	
	[pinTypeMatrix setEnabled:!locked];

	short i;
	for(i=0;i<kNumArduinoUNOPins;i++){
		if([model pinType:i] == kArduinoPWM){
			[[pwmMatrix cellAtRow:i column:0] setEnabled:!locked];
			[[pinStateOutMatrix cellAtRow:i column:0] setEnabled:NO];
			[[pinStateInMatrix cellAtRow:i column:0] setStringValue:@"-"];
		}
		else {
			if([model pinType:i] == kArduinoOutput){
				[[pinStateOutMatrix cellAtRow:i column:0] setEnabled:!locked];
				[[pinStateInMatrix cellAtRow:i column:0] setStringValue:@"-"];
				[[pwmMatrix cellAtRow:i column:0] setEnabled:NO];
			}
			else {
				[[pwmMatrix cellAtRow:i column:0] setEnabled:NO];
				[[pinStateOutMatrix cellAtRow:i column:0] setEnabled:NO];
				[[pinStateInMatrix cellAtRow:i column:0] setEnabled:YES];
			}
		}
	}
}
- (void) lowLimitChanged:(NSNotification*)aNotification
{
	if(!aNotification){
		int i;
		for(i=0;i<kNumArduinoUNOAdcChannels;i++){
			[[lowLimitMatrix cellWithTag:i] setFloatValue:[model lowLimit:i]];
		}
	}
	else {
		int chan = [[[aNotification userInfo] objectForKey:@"Channel"] floatValue];
		if(chan<kNumArduinoUNOAdcChannels){
			[[lowLimitMatrix cellWithTag:chan] setFloatValue:[model lowLimit:chan]];
		}
	}
}

- (void) hiLimitChanged:(NSNotification*)aNotification
{
	if(!aNotification){
		int i;
		for(i=0;i<kNumArduinoUNOAdcChannels;i++){
			[[hiLimitMatrix cellWithTag:i] setFloatValue:[model hiLimit:i]];
		}
	}
	else {
		int chan = [[[aNotification userInfo] objectForKey:@"Channel"] floatValue];
		if(chan<kNumArduinoUNOAdcChannels){
			[[hiLimitMatrix cellWithTag:chan] setFloatValue:[model hiLimit:chan]];
		}
	}
}

- (void) minValueChanged:(NSNotification*)aNotification
{
	if(!aNotification){
		int i;
		for(i=0;i<kNumArduinoUNOAdcChannels;i++){
			[[minValueMatrix cellWithTag:i] setFloatValue:[model minValue:i]];
		}
	}
	else {
		int chan = [[[aNotification userInfo] objectForKey:@"Channel"] floatValue];
		if(chan<kNumArduinoUNOAdcChannels){
			[[minValueMatrix cellWithTag:chan] setFloatValue:[model minValue:chan]];
		}
	}
}

- (void) maxValueChanged:(NSNotification*)aNotification
{
	if(!aNotification){
		int i;
		for(i=0;i<kNumArduinoUNOAdcChannels;i++){
			[[maxValueMatrix cellWithTag:i] setFloatValue:[model maxValue:i]];
		}
	}
	else {
		int chan = [[[aNotification userInfo] objectForKey:@"Channel"] floatValue];
		if(chan<kNumArduinoUNOAdcChannels){
			[[maxValueMatrix cellWithTag:chan] setFloatValue:[model maxValue:chan]];
		}
	}
}

- (void) slopeChanged:(NSNotification*)aNotification
{
	if(!aNotification){
		int i;
		for(i=0;i<kNumArduinoUNOAdcChannels;i++){
			[[slopeMatrix cellWithTag:i] setFloatValue:[model slope:i]];
		}
	}
	else {
		int chan = [[[aNotification userInfo] objectForKey:@"Channel"] floatValue];
		if(chan<kNumArduinoUNOAdcChannels){
			[[slopeMatrix cellWithTag:chan] setFloatValue:[model slope:chan]];
		}
	}
}

- (void) interceptChanged:(NSNotification*)aNotification
{
	if(!aNotification){
		int i;
		for(i=0;i<kNumArduinoUNOAdcChannels;i++){
			[[interceptMatrix cellWithTag:i] setFloatValue:[model intercept:i]];
		}
	}
	else {
		int chan = [[[aNotification userInfo] objectForKey:@"Channel"] floatValue];
		if(chan<kNumArduinoUNOAdcChannels){
			[[interceptMatrix cellWithTag:chan] setFloatValue:[model intercept:chan]];
		}
	}
}

- (void) pollTimeChanged:(NSNotification*)aNotification
{
	[pollTimePopup selectItemWithTag:[model pollTime]];
}

- (void) pwmChanged:(NSNotification*)aNote
{
	if(aNote == nil){
        short i;
        for(i=0;i<kNumArduinoUNOPins;i++){
			if([model validForPwm:i]){
				[[pwmMatrix cellAtRow:i column:0] setIntValue:[model pwm:i]];
			}
			else {
				[[pwmMatrix cellAtRow:i column:0] setStringValue:@""];
			}
        }
    }
    else {
        int i = [[[aNote userInfo] objectForKey:@"Pin"] intValue];
		if([model validForPwm:i]){
			[[pwmMatrix cellAtRow:i column:0] setIntValue:[model pwm:i]];
		}
		else [[pwmMatrix cellAtRow:i column:0] setStringValue:@""];
    }
	
}

- (void) pinTypeChanged:(NSNotification*)aNote
{
	if(aNote == nil){
        short i;
        for(i=0;i<kNumArduinoUNOPins;i++){
            [[pinTypeMatrix cellAtRow:i column:0] selectItemAtIndex:[model pinType:i]];
        }
    }
    else {
        int i = [[[aNote userInfo] objectForKey:@"Pin"] intValue];
        [[pinTypeMatrix cellAtRow:i column:0] selectItemAtIndex:[model pinType:i]];
    }
	[pinTypeMatrix setNeedsDisplay:YES];
	[self updateButtons];
}

- (void) pinStateInChanged:(NSNotification*)aNote
{
	if(aNote == nil){
        short i;
        for(i=0;i<kNumArduinoUNOPins;i++){
			NSString* s = @"-";
			if([model pinType:i]==kArduinoInput)s = [model pinStateIn:i]?@"Hi":@"Lo";
            [[pinStateInMatrix cellWithTag:i] setStringValue:s];
        }
    }
    else {
        int i = [[[aNote userInfo] objectForKey:@"Pin"] intValue];
		NSString* s = @"-";
		if([model pinType:i]==kArduinoInput)s = [model pinStateIn:i]?@"Hi":@"Lo";
        [[pinStateInMatrix cellWithTag:i] setStringValue:s];
    }
}

- (void) pinStateOutChanged:(NSNotification*)aNote
{
	if(aNote == nil){
        short i;
        for(i=0;i<kNumArduinoUNOPins;i++){
            [[pinStateOutMatrix cellWithTag:i] setIntValue:[model pinStateOut:i]];
        }
    }
    else {
        int i = [[[aNote userInfo] objectForKey:@"Pin"] intValue];
        [[pinStateOutMatrix cellWithTag:i] setIntValue:[model pinStateOut:i]];
    }
}

- (void) pinNameChanged:(NSNotification*)aNote
{
    if(aNote == nil){
        short i;
        for(i=0;i<kNumArduinoUNOPins;i++){
            [[pinNameMatrix cellWithTag:i] setStringValue:[model pinName:i]];
        }
    }
    else {
        int i = [[[aNote userInfo] objectForKey:@"Pin"] intValue];
        [[pinNameMatrix cellWithTag:i] setStringValue:[model pinName:i]];
    }
}

- (void) adcChanged:(NSNotification*)aNote
{
    if(aNote == nil){
        short i;
        for(i=0;i<kNumArduinoUNOAdcChannels;i++){
            [[adcMatrix cellWithTag:i] setFloatValue:[model convertedValue:i]];
        }
    }
    else {
        int i = [[[aNote userInfo] objectForKey:@"Channel"] intValue];
        [[adcMatrix cellWithTag:i] setFloatValue:[model convertedValue:i]];
    }
}

- (void) customValueChanged:(NSNotification*)aNote
{
    if(aNote == nil){
        short i;
        for(i=0;i<kNumArduinoUNOCustomChannels;i++){
            [[customValueMatrix cellWithTag:i] setFloatValue:[model customValue:i]];
        }
    }
    else {
        int i = [[[aNote userInfo] objectForKey:@"Channel"] intValue];
        [[customValueMatrix cellWithTag:i] setFloatValue:[model customValue:i]];
    }
}

#pragma mark •••Actions

- (void) versionAction:(id)sender
{
	[model getVersion];	
}

- (IBAction) lockAction:(id) sender
{
    [gSecurity tryToSetLock:ORArduinoUNOLock to:[sender intValue] forWindow:[self window]];
}

- (IBAction) updateAllAction:(id)sender
{
	[model updateAll];
}

- (IBAction) pollTimeAction:(id)sender
{
	[model setPollTime:(int)[[sender selectedItem] tag]];
}

- (IBAction) pinTypeAction:(id)sender
{
	int thePin = (int)[sender selectedRow];
	[model setPin:thePin type:[[sender selectedCell] indexOfSelectedItem]];
}

- (IBAction) pinNameAction:(id)sender
{
	int thePin = (int)[[sender selectedCell] tag];
	if(![[model pinName:thePin] isEqualToString: [sender stringValue]]){
		[model setPin:thePin name:[sender stringValue]];
	}
}

- (IBAction) pinStateOutAction:(id)sender
{
	int thePin = (int)[[sender selectedCell] tag];
	if([model pinStateOut:thePin]!= [sender intValue]){
		[model setPin:thePin stateOut:[sender intValue]];
	}
}

- (IBAction) pwmAction:(id)sender
{
	int thePin = (int)[[sender selectedCell] tag];
	if([model pwm:thePin] != [sender intValue]){
		[model setPin:thePin pwm:[sender intValue]];
	}
}

- (IBAction) writeValues:(id)sender
{
	[self endEditing];
	[model initHardware];
}
- (IBAction) slopeAction:(id)sender
{
	[model setSlope:(int)[[sender selectedCell] tag] value:[[sender selectedCell] floatValue]];
}

- (IBAction) interceptAction:(id)sender
{
	[model setIntercept:(int)[[sender selectedCell] tag] value:[[sender selectedCell] floatValue]];
}
- (IBAction) lowLimitAction:(id)sender
{
	[model setLowLimit:(int)[[sender selectedCell] tag] value:[[sender selectedCell] floatValue]];
}

- (IBAction) hiLimitAction:(id)sender
{
	[model setHiLimit:(int)[[sender selectedCell] tag] value:[[sender selectedCell] floatValue]];
}

- (IBAction) minValueAction:(id)sender
{
	[model setMinValue:(int)[[sender selectedCell] tag] value:[[sender selectedCell] floatValue]];
}

- (IBAction) maxValueAction:(id)sender
{
	[model setMaxValue:(int)[[sender selectedCell] tag] value:[[sender selectedCell] floatValue]];
}

@end

